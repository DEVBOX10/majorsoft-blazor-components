<div class="scrollToPageTop" @onclick="async () => await _scrollHandler.ScrollToPageTopAsync(SmootScroll)">
    @Content
</div>

<style>
    .scrollToPageTop {
        position: fixed;
        bottom: 1.2rem;
        right: 1.5rem;
        z-index: 20;
        cursor: pointer;
        opacity: @(_isVisible ? 1 : 0);
        transition: opacity 0.2s linear;
    }
</style>

@implements IAsyncDisposable

@inject IScrollHandler _scrollHandler
@inject ILogger<ScrollToPageTop> _logger

@code {
    private bool _isVisible = false;
    private bool IsVisible
    {
        get => _isVisible;
        set
        {
            if (value != _isVisible)
            {
                _isVisible = value;
                StateHasChanged();
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await _scrollHandler.RegisterPageScrollAsync(async (e) =>
        {
            var scrollSize = await _scrollHandler.GetPageScrollSizeAsync();
            var percentage = (e.Y / scrollSize.Y) * 100;

            IsVisible = percentage >= VisibleFromPagePercentage;
        });
    }

    /// <summary>
    ///
    /// </summary>
    [Parameter] public RenderFragment Content { get; set; }

    /// <summary>
    ///
    /// </summary>
    [Parameter] public byte VisibleFromPagePercentage { get; set; } = 30;

    /// <summary>
    /// 
    /// </summary>
    [Parameter] public bool SmootScroll { get; set; } = true;


    public async ValueTask DisposeAsync()
    {
        if (_scrollHandler is not null)
        {
            await _scrollHandler.DisposeAsync();
        }
    }
}