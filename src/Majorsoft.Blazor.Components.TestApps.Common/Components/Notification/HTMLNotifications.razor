<div class="container-fluid p-3 mb-3 border rounded">
	<PermaLinkElement PermaLinkName="htmlnotification" IconActions="PermaLinkIconActions.Copy|PermaLinkIconActions.Navigate" IconMarginTop="8" IconSize="18">
		<Content><h3>HTML5 Notification</h3></Content>
	</PermaLinkElement>
	<p>
		Injectable <strong><code>IHtmlNotificationService</code> service </strong> which is a <strong> wrapper for Notification API</strong>
		to handle <a href="https://developer.mozilla.org/en-US/docs/Web/API/notification" target="_blank">HTML5 notifications</a>.
	</p>

	<div class="row pb-2">
		<div class="col-12 col-lg-8 col-xl-5">
			HTML5 Notification supported:
			<strong class="mr-2 @(_notificationSupported ? "text-success" : "text-danger")">@_notificationSupported</strong>
			Notification user consent:
			<strong class="@(_htmlNotificationPermission == HtmlNotificationPermissionTypes.Denied ? "text-danger" : "text-success")">@_htmlNotificationPermission</strong>
		</div>
	</div>

	@if (_notificationSupported)
	{
		@if (_htmlNotificationPermission != HtmlNotificationPermissionTypes.Granted)
		{
			<button class="btn btn-primary mt-2" @onclick="RequestPermission">Request user Permission</button>
		}
		else
		{
			<div class="row pb-2">
				<div class="col-12 col-lg-8 col-xl-5">
					Notification Title: <input class="form-control w-100" @bind="_notificationTitle" />
				</div>
			</div>
			<div class="row pb-2">
				<div class="col-12 col-lg-8 col-xl-5">
					Notification Body: <input class="form-control w-100" @bind="_notificationBody" />
				</div>
			</div>
			<div class="row pb-2">
				<div class="col-12 col-lg-8 col-xl-5">
					Notification Icon (https://www.google.com/favicon.ico): <input class="form-control w-100" @bind="_notificationIcon" />
				</div>
			</div>

			<label>Show with custom Actions:</label> <input class="mr-2" type="checkbox" @bind="_showActions" />
			<br />
			@if (_showActions)
			{
				<button class="btn btn-primary mt-2" @onclick="ShowSimpeNotification">Show HTML notification with Custom actions</button>
			}
			else
			{
				<button class="btn btn-primary mt-2" @onclick="ShowSimpeNotification">Show HTML notification</button>
			}

			<div class="row pb-2">
				<div class="col-12">
					<label><strong>Event log</strong>:</label>
					<textarea @ref="log1" @bind="_alertLog" style="height:200px;" class="form-control w-100" readonly></textarea>
				</div>
			</div>
		}
	}

</div>

@inject IHtmlNotificationService _notificationService
@implements IAsyncDisposable

@code {
	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			_notificationSupported = await _notificationService.IsBrowserSupportedAsync();
			_htmlNotificationPermission = await _notificationService.CheckPermissionAsync();
			StateHasChanged();
		}
	}
	private bool _showActions = true;
	private ElementReference log1;
	private string _alertLog = "";

	//HTML5 notification
	private bool _notificationSupported;
	private HtmlNotificationPermissionTypes _htmlNotificationPermission;
	private string _notificationTitle = "Notification Title";
	private string _notificationBody = "Notification Body";
	private string _notificationIcon = "blazor.components.png";

	private async Task RequestPermission()
	{
		await _notificationService.RequestPermissionAsync(async res =>
		{
			_htmlNotificationPermission = res;
			StateHasChanged();
		});
	}

	private async Task ShowSimpeNotification()
	{
		var options = new HtmlNotificationOptions(_notificationTitle)
		{
			Body = _notificationBody,
			Icon = _notificationIcon,
			Vibrate = new int[] { 100, 200, 100},
			//events
			OnOpenCallback = async (id) => { _alertLog = await WriteLog(_alertLog, $"HTML Notification '{id}' event: 'OnOpen'"); Console.WriteLine("OnOpenCallback"); },
			OnCloseCallback = async (id) => { _alertLog = await WriteLog(_alertLog, $"HTML Notification '{id}' event: 'OnClose'"); Console.WriteLine("OnCloseCallback"); },
			OnErrorCallback = async (id) => { _alertLog = await WriteLog(_alertLog, $"HTML Notification '{id}' event: 'OnError'"); Console.WriteLine("OnErrorCallback"); },
			OnClickCallback = async (id) => { _alertLog = await WriteLog(_alertLog, $"HTML Notification '{id}' event: 'OnClick'"); Console.WriteLine("OnClickCallback"); },
		};

		var id = await _notificationService.ShowsAsync(options);
	}
	private async Task ShowWithActionsNotification()
	{
		var options = new HtmlServiceWorkerNotificationOptions(_notificationTitle)
		{
			Body = _notificationBody,
			Icon = _notificationIcon,
			//actions
			Actions = new NotificationAction[]
			{
			   new NotificationAction() { Action = "action1", Title = "Custom action"},
			   new NotificationAction() { Action = "action2", Title = "Other action"},
			},
			Vibrate = new int[] { 100, 200, 100 },
			//events
			OnOpenCallback = async (id) => { _alertLog = await WriteLog(_alertLog, $"HTML Notification '{id}' event: 'OnOpen'"); Console.WriteLine("OnOpenCallback"); },
			OnCloseCallback = async (id) => { _alertLog = await WriteLog(_alertLog, $"HTML Notification '{id}' event: 'OnClose'"); Console.WriteLine("OnCloseCallback"); },
			OnErrorCallback = async (id) => { _alertLog = await WriteLog(_alertLog, $"HTML Notification '{id}' event: 'OnError'"); Console.WriteLine("OnErrorCallback"); },
			OnClickCallback = async (id) => { _alertLog = await WriteLog(_alertLog, $"HTML Notification '{id}' event: 'OnClick'"); Console.WriteLine("OnClickCallback"); },
			OnActionClickCallback = async (id, action) => { _alertLog = await WriteLog(_alertLog, $"HTML Notification '{id}' event: 'OnClick' on Action: '{action}'"); }
		};

		var id = await _notificationService.ShowsAsync(options);
	}

	private object _lock = new object();
	private async Task<string> WriteLog(string log, string message)
	{
		lock (_lock)
		{
			log += $"{DateTime.Now.TimeOfDay}: {message}. \r\n";
		}
		await log1.ScrollToEndAsync();

		StateHasChanged();
		return log;
	}
	public async ValueTask DisposeAsync()
	{
		if (_notificationService is not null)
		{
			await _notificationService.DisposeAsync();
		}
	}
}