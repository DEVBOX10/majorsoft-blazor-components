<h1>Notifications</h1>
<PageScroll />

<p>
	Blazor <strong>injectable <code>INotificationService</code> service</strong> and components that renders customizable Alert and Toast notification message elements. For usage see source code and docs on
	<a href="https://github.com/majorimi/blazor-components/blob/master/.github/docs/Notifications.md" target="_blank">Github</a>.
	<br /><strong>Majorsoft.Blazor.Components.Notifications</strong> package is available on <a href="https://www.nuget.org/packages/Majorsoft.Blazor.Components.Notifications" target="_blank">Nuget</a>
</p>

<h3>Notification features:</h3>
<ul>
	<li><NavLink href="notifications#alerts">Alert</NavLink></li>
	<li><NavLink href="notifications#toasts">Toast</NavLink></li>
	<li><NavLink href="notifications#htmlnotification">Html5 Notification</NavLink></li>
</ul>

<div class="container-fluid p-3 mb-3 border rounded">
	<PermaLinkElement PermaLinkName="alerts" IconActions="PermaLinkIconActions.Copy|PermaLinkIconActions.Navigate" IconMarginTop="8" IconSize="18">
		<Content><h3>Alert</h3></Content>
	</PermaLinkElement>
	<p>
		Renders <strong><code>Alert</code> component </strong> which is a banner to show important system messages. 
		Importance can be emphasized by <code>SeverityLevel</code> and styling with customizable content. Alerts can be closes automatically or let user close them, etc.
	</p>

	<div class="w-100">
		<Alert Severity="@_alertSeverityLevel"
			   IsVisible="@_alertIsVisible"
			   AutoClose="@_alertAutoClose"
			   AutoCloseInSec="@_alertAutoCloseInSec"
			   ShowCloseButton="@_alertShowCloseButton"
			   ShowIcon="@_alertShowIcon"
			   OnOpen="OnOpen"
			   OnClose="OnClose"
			   OnCloseButtonClicked="OnCloseButtonClicked">
			<Content>
				<strong>Alert:</strong> @_alertText
			</Content>
		</Alert>
	</div>

	<div class="row pb-2">
		<div class="col-12 col-lg-8 col-xl-5">
			Alert is Visible: <input class="mr-2" type="checkbox" @bind="_alertIsVisible" disabled="disabled" />
			Show Close button: <input class="mr-2" type="checkbox" @bind="_alertShowCloseButton" />
			Show icon: <input class="mr-2" type="checkbox" @bind="_alertShowIcon" />
			<br />
			Auto close (after @_alertAutoCloseInSec sec): <input class="mr-2" type="checkbox" @bind="_alertAutoClose" disabled="@_alertIsVisible" />
			<input type="range" class="w-100" min="1" max="20" @bind="_alertAutoCloseInSec" @oninput="(e => _alertAutoCloseInSec = uint.Parse(e.Value?.ToString()))" disabled="@_alertIsVisible" />
		</div>
	</div>

	<div class="row pb-2">
		<div class="col-12 col-lg-8 col-xl-5">
			Message: <input class="form-control w-100" @bind="_alertText" />
		</div>
	</div>
	<div class="row pb-2">
		<div class="col-12 col-lg-8 col-xl-5">
			Severity Level:
			<select class="form-control selectpicker w-100"
					@onchange="@(e => { _alertSeverityLevel = Enum.Parse<SeverityLevel>(e.Value?.ToString()); _alertText = $"This is a(n) {_alertSeverityLevel} alert..."; })">
				@foreach (var item in Enum.GetValues(typeof(SeverityLevel)))
				{
					<option value="@item">@item</option>
				}
			</select>

			<button class="btn btn-primary mt-2" disabled="@_alertIsVisible" @onclick="a => _alertIsVisible = !_alertIsVisible">Show Alert</button>
		</div>
	</div>

	<div class="row pb-2">
		<div class="col-12">
			<label><strong>Event log</strong>:</label>
			<textarea @ref="log1" @bind="_alertLog" style="height:200px;" class="form-control w-100" readonly></textarea>
		</div>
	</div>
</div>

<div class="container-fluid p-3 mb-3 border rounded">
	<PermaLinkElement PermaLinkName="toasts" IconActions="PermaLinkIconActions.Copy|PermaLinkIconActions.Navigate" IconMarginTop="8" IconSize="18">
		<Content><h3>Toast</h3></Content>
	</PermaLinkElement>
	<p>Renders <strong><code>CollapsePanel</code> component </strong> which is an <strong> Expandable and Collapsible panel</strong> with custumizable header and content.</p>

</div>

<div class="container-fluid p-3 mb-3 border rounded">
	<PermaLinkElement PermaLinkName="htmlnotification" IconActions="PermaLinkIconActions.Copy|PermaLinkIconActions.Navigate" IconMarginTop="8" IconSize="18">
		<Content><h3>HTML5 Notification</h3></Content>
	</PermaLinkElement>
	<p>Renders <strong><code>CollapsePanel</code> component </strong> which is an <strong> Expandable and Collapsible panel</strong> with custumizable header and content.</p>

</div>

@code {
	private bool _alertIsVisible = false;
	private bool _alertAutoClose = true;
	private bool _alertShowIcon = true;
	private bool _alertShowCloseButton = true;
	private uint _alertAutoCloseInSec = 5;
	private string _alertText = "This is a(n) Normal alert...";
	private SeverityLevel _alertSeverityLevel = SeverityLevel.Normal;

	private ElementReference log1;
	private string _alertLog = "";

	//Alert events
	public async Task OnOpen()
	{
		_alertLog = await WriteLog(_alertLog, $"Alert event: '{nameof(OnOpen)}' Dialog opened.");
	}
	public async Task OnClose()
	{
		_alertIsVisible = false; //Or use two-way binding.
		_alertLog = await WriteLog(_alertLog, $"Alert event: '{nameof(OnClose)}' Dialog closed.");
	}
	private async Task OnCloseButtonClicked(MouseEventArgs e)
	{
		_alertLog = await WriteLog(_alertLog, $"Alert event: '{nameof(OnCloseButtonClicked)}', Event args: {e}.");
	}



	private async Task<string> WriteLog(string log, string message)
	{
		log += $"{DateTime.Now.TimeOfDay}: {message}. \r\n";
		await log1.ScrollToEndAsync();

		return log;
	}
}