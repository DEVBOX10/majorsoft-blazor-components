@using System.Timers

@inherits InputText
@implements IDisposable
@inject ILogger<DebounceInputText> _logger;

<input value="@InternalValue" class="@CssClass" @oninput="OnTextChange" @onblur="OnBlur" @onkeypress="OnKeyPress" @attributes="AdditionalAttributes" />

@code {
	protected string InternalValue;

	[Parameter] public int MinLength { get; set; } = 0;
	[Parameter] public int DebounceTime { get; set; } = 200;
	[Parameter] public bool ForceNotifyByEnter { get; set; } = true;
	[Parameter] public bool ForceNotifyOnBlur { get; set; } = true;

	[Parameter] public EventCallback<string> OnValueChanged { get; set; }

	private Timer _timer;

	protected override void OnInitialized()
	{
		InternalValue = CurrentValue;
//TODO: disable as well...
		_timer = new Timer(DebounceTime);
		_timer.Elapsed += OnElapsed;
		_timer.AutoReset = false;

		WriteDiag($"Initialized with Value: '{InternalValue}', Timer interval: '{DebounceTime}' ms, MinLength: '{MinLength}'.");

		base.OnInitialized();
	}

	protected void OnTextChange(ChangeEventArgs e)
	{
		WriteDiag($"OnTextChange event: '{e.Value}'");

		_timer.Stop(); //Stop previous timer
		_timer.Start(); //Re-start timer

		InternalValue = e.Value?.ToString();

		EventCallback.Factory.CreateBinder<string>(this, __value => CurrentValueAsString = __value, CurrentValueAsString);
	}
	protected void OnBlur(FocusEventArgs e)
	{
		WriteDiag($"OnBlur event: '{e.Type}'");

		if (ForceNotifyOnBlur)
		{
			_timer.Stop(); //Stop timer
			OnElapsed(null, null);
		}
	}
	protected void OnKeyPress(KeyboardEventArgs e)
	{
		WriteDiag($"OnKeyPress event: '{e.Key}'");

		if (ForceNotifyByEnter && (e.Key?.Equals("Enter", StringComparison.OrdinalIgnoreCase) ?? false))
		{
			_timer.Stop(); //Stop timer
			OnElapsed(null, null);
		}
	}

	protected void OnElapsed(object source, ElapsedEventArgs e)
	{
		WriteDiag($"Timer triggered after: '{DebounceTime}' ms delay, Value: '{InternalValue}'");

		var invokeValue = InternalValue?.Length >= MinLength
			? InternalValue
			: string.Empty;

		InvokeAsync(async () =>
		{
			WriteDiag($"Invoke ValueChanged event with: '{invokeValue}'");

			CurrentValue = InternalValue;
			//await ValueChanged.InvokeAsync(invokeValue);  //Base class event...
			await OnValueChanged.InvokeAsync(invokeValue);
			StateHasChanged();
		});
	}

	public void Dispose()
	{
		if (_timer is not null)
		{
			_timer.Elapsed -= OnElapsed;
			_timer.Dispose();
		}
	}

	private void WriteDiag(string message)
	{
		_logger.LogDebug($"Component {this.GetType()}: {message}");
	}
}
