<div class="picker-container" style="height:@(HueAreaHeight)px; width: @(HueAreaWidth)px; background-color: @_sliderThumbHex;">
	<div class="picker-color" @onclick="ClickInColor" @onmousemove="DraggingSelectorHandler"></div>
	<span class="picker-handler" tabindex="0" @onclick="ClickInHandler" @onmousedown="@(() => _handlerDraggable = true)" @onmouseup="@(() => _handlerDraggable = false)"
		style="height:@(_selectorThumbSize)px; width:@(_selectorThumbSize)px; left:@(_selectorThumbLeft)px; top: @(_selectorThumbTop)px; background:@_selectorThumbHex">
	</span>
</div>

<input id="@($"_hue_{_componentId}")" class="hue" style="width:@(HueSliderWidth)px; height:@(HueSliderHeight)px;" 
	   type="range" min="0" max="360" step="1" @bind="_hue" @oninput="HueChanged" />

<style>
	input[id=@($"_hue_{_componentId}")].hue::-webkit-slider-thumb {
		background: @_sliderThumbHex;
		width: @(_sliderThumbSize)px;
		height: @(_sliderThumbSize)px;
	}
	input[id=@($"_hue_{_componentId}")]::-moz-range-thumb {
		background: @_sliderThumbHex;
		width: @(_sliderThumbSize)px;
		height: @(_sliderThumbSize)px;
	}
	input[id=@($"_hue_{_componentId}")]::-ms-thumb {
		background: @_sliderThumbHex;
		width: @(_sliderThumbSize)px;
		height: @(_sliderThumbSize)px;
	}
</style>

@inject ILogger<HslColorSelector> _logger;

@code {
	string _componentId = Guid.NewGuid().ToString("n");

	private int _hue;
	private int _sliderThumbSize;
	private string _sliderThumbHex = "";

	private int _selectorThumbSize = 23;
	private double _selectorThumbLeft;
	private double _selectorThumbTop;
	private string _selectorThumbHex = "";

	private bool _handlerDraggable = false;

	[Parameter] public int HueAreaHeight { get; set; } = 250;
	[Parameter] public int HueAreaWidth { get; set; } = 450;
	[Parameter] public int HueSliderHeight { get; set; } = 10;
	[Parameter] public int HueSliderWidth { get; set; } = 450;
	private Color _selectedColor = Color.Blue;
	[Parameter] public Color SelectedColor 
	{ 
		get => _selectedColor;
		set
		{
			if (_selectedColor.Name != value.Name)
			{
				_selectedColor = value;
				//RGB to HSL
				var hsl = HslColor.FromRgb(value);
				_hue = (int)Math.Round(hsl.Hue);

				//TODO: Position is not correct not all color is at the corner if saturation!=100 or luminosity!=50.0
				@*_selectorThumbLeft = HueAreaWidth - (_selectorThumbSize / 2);
				_selectorThumbTop = 0 - (_selectorThumbSize / 2);
				SetSliderColorAsync();*@
			}
		}
	}

	[Parameter] public EventCallback<Color> OnColorChanged { get; set; }

	protected override async Task OnInitializedAsync()
	{
		_sliderThumbSize = (int)Math.Ceiling(HueSliderHeight * 2.5);
		_hue = (int)Math.Round(SelectedColor.GetHue());

		_selectorThumbLeft = HueAreaWidth - (_selectorThumbSize / 2);
		_selectorThumbTop = 0 - (_selectorThumbSize / 2);

		await SetSliderColorAsync();
	}

	private async Task HueChanged(ChangeEventArgs e)
	{
		var val = int.Parse(e?.Value?.ToString());
		if(_hue == val)
		{
			return;
		}

		_hue = val;
		WriteDiag($"{nameof(HueChanged)} Hue sliced changed Hue: {_hue}.");

		await SetSliderColorAsync();
	}

	private async Task SetSliderColorAsync()
	{
		// Hue: slider value, saturation: 100.0 (full), luminosity: 50.0 (normal)
		var hslColor = new HslColor(_hue, 100, 50);
		var hueColor = (Color)hslColor;

		_sliderThumbHex = ColorTranslator.ToHtml(hueColor);

		await GetBilinearColor(_selectorThumbLeft +(_selectorThumbSize / 2), _selectorThumbTop + (_selectorThumbSize / 2), hueColor);
	}

	private async Task ClickInColor(MouseEventArgs args)
	{
		WriteDiag($"{nameof(ClickInColor)} Color selector area clicked X: {args.OffsetX}, Y: {args.OffsetY}.");

		_selectorThumbLeft = args.OffsetX - (_selectorThumbSize / 2);
		_selectorThumbTop = args.OffsetY - (_selectorThumbSize / 2);

		await GetBilinearColor(args.OffsetX, args.OffsetY, ColorTranslator.FromHtml(_sliderThumbHex));
	}
	private async Task ClickInHandler(MouseEventArgs args)
	{
		args.OffsetX += _selectorThumbLeft;
		args.OffsetY += _selectorThumbTop;

		await ClickInColor(args);
	}
	private async Task DraggingSelectorHandler(MouseEventArgs args)
	{
		if(_handlerDraggable)
		{
			WriteDiag($"{nameof(DraggingSelectorHandler)} Color picker dragging allowed: {_handlerDraggable} X: {args.OffsetX}, Y: {args.OffsetY}.");
			await ClickInColor(args);
		}
	}

	private async Task GetBilinearColor(double x, double y, Color mainColor)
	{
		var r = BilinearInterpolationCalculator((int)_selectorThumbLeft, (int)_selectorThumbTop, mainColor.R);
		var g = BilinearInterpolationCalculator((int)_selectorThumbLeft, (int)_selectorThumbTop, mainColor.G);
		var b = BilinearInterpolationCalculator((int)_selectorThumbLeft, (int)_selectorThumbTop, mainColor.B);

		var bilinearColor = Color.FromArgb(r, g, b);
		_selectorThumbHex = ColorTranslator.ToHtml(bilinearColor);

		_selectedColor = bilinearColor;
		
		if(OnColorChanged.HasDelegate)
		{
			await OnColorChanged.InvokeAsync(bilinearColor);
		}
	}
	private int BilinearInterpolationCalculator(double x, double y, int q21)
	{
		var p = MathExtensions.BilinearInterpolationCalculator(
		0, 0, HueAreaWidth, HueAreaHeight, //0,0 to DIV height/width
		x, y,	//Click pos
		255,	//Top-R = white
		0,		//Bottom-R = black
		q21,	//Top-L = Q21, Hue value 
		0);     //Bottom-L = black

		if (p < 0)
			return 0;

		if (p > 255)
			return 255;

		return (int)p;
	}

	private void WriteDiag(string message)
	{
		_logger.LogDebug($"Component {this.GetType()}: {message}");
	}
}