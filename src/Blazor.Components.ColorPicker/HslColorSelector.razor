<div class="picker-container" style="height:@(HueAreaHeight)px; width: @(HueAreaWidth)px; background-color: @_sliderThumbHex;">
	<div @ref="_colorPicker" class="picker-color" @onclick="ClickInColor"></div>
	<span class="picker-handler" tabindex="0" @onclick="ClickInHandler" @onmousedown="@DragStart"
		style="height:@(_selectorThumbSize)px; width:@(_selectorThumbSize)px; left:@(_selectorThumbLeft)px; top: @(_selectorThumbTop)px; background:@_selectorThumbHex;">
	</span>
</div>

<input id="@($"_hue_{_componentId}")" class="hue" style="width:@(HueSliderWidth)px; height:@(HueSliderHeight)px;" 
	   type="range" min="0" max="360" step="1" @bind="_hue" @oninput="HueChanged" />

@if(ShowInfoArea) {
	<div style="width:@(HueSliderWidth)px; margin-top:1rem;">
		<div>
			<div class="colorInfoWrapper" style="width: 49%">
				<div class="colorInfoData" style="background:@_selectorThumbHex; border: lightgray solid 0.5px;"></div>
				<div class="colorInfoWrapperLabel">Sample</div>
			</div>
			<div class="colorInfoWrapper" style="width: 49%">
				<div class="colorInfoData">
					<input class="colorInfoDataInput" value="@(SelectedColor.IsKnownColor ? SelectedColor.Name : "-")" />
				</div>
				<div class="colorInfoWrapperLabel">Name</div>		
			</div>
		</div>

		<div>
			<div class="colorInfoWrapper">
				<div class="colorInfoData">
					<input class="colorInfoDataInput" value="@($"{SelectedColor.R}, {SelectedColor.G}, {SelectedColor.B}")" />
				</div>
				<div class="colorInfoWrapperLabel">RGB</div>
			</div>
			<div class="colorInfoWrapper">
				<div class="colorInfoData">
					<input class="colorInfoDataInput" value="@(ColorTranslator.ToHtml(SelectedColor))" />
				</div>
				<div class="colorInfoWrapperLabel">HEX</div>		
			</div>
			<div class="colorInfoWrapper">
				<div class="colorInfoData">
					<input class="colorInfoDataInput" value="@("")" />
				</div>
				<div class="colorInfoWrapperLabel">HSL</div>		
			</div>
		</div>
	</div>
}

<style>
	input[id=@($"_hue_{_componentId}")].hue::-webkit-slider-thumb {
		background: @_sliderThumbHex;
		width: @(_sliderThumbSize)px;
		height: @(_sliderThumbSize)px;
	}
	input[id=@($"_hue_{_componentId}")]::-moz-range-thumb {
		background: @_sliderThumbHex;
		width: @(_sliderThumbSize)px;
		height: @(_sliderThumbSize)px;
	}
	input[id=@($"_hue_{_componentId}")]::-ms-thumb {
		background: @_sliderThumbHex;
		width: @(_sliderThumbSize)px;
		height: @(_sliderThumbSize)px;
	}
</style>

@inject ILogger<HslColorSelector> _logger;
@inject IGlobalMouseEventHandler _globalMouseEventHandler;

@implements IAsyncDisposable

@code {
	string _componentId = Guid.NewGuid().ToString("n");
	private ElementReference _colorPicker;
	private DomRect _colorPickerRect;
	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		_colorPickerRect = await _colorPicker.GetClientRectAsync();
	}
	protected override async Task OnInitializedAsync()
	{
		_sliderThumbSize = (int)Math.Ceiling(HueSliderHeight * 2.5);
		_hue = (int)Math.Round(SelectedColor.GetHue());

		_selectorThumbLeft = HueAreaWidth - (_selectorThumbSize / 2);
		_selectorThumbTop = 0 - (_selectorThumbSize / 2);

		await SetSliderColorAsync();
	}

	private int _hue;
	private int _sliderThumbSize;
	private string _sliderThumbHex = "";

	private int _selectorThumbSize = 23;
	private double _selectorThumbLeft;
	private double _selectorThumbTop;
	private string _selectorThumbHex = "";

	private bool _handlerDragging = false;
	
	private int _divsMinWidth= 300;
	private int _divsMinHeight = 150;
	private int _hueAreaHeight = 300;
	[Parameter] public int HueAreaHeight 
	{ 
		get => _hueAreaHeight;
		set
		{
			if(value < _divsMinHeight)
			{
				value = _divsMinHeight;
			}

			_hueAreaHeight = value;
		}
	}
	private int _hueAreaWidth = 450;
	[Parameter] public int HueAreaWidth
	{ 
		get => _hueAreaWidth;
		set
		{
			if(value < _divsMinWidth)
			{
				value = _divsMinWidth;
			}

			_hueAreaWidth = value;
		}
	}
	[Parameter] public int HueSliderHeight { get; set; } = 10;
	private int _hueSliderWidth = 450;
	[Parameter] public int HueSliderWidth
	{ 
		get => _hueSliderWidth;
		set
		{
			if(value < _divsMinWidth)
			{
				value = _divsMinWidth;
			}

			_hueSliderWidth = value;
		}
	}
	[Parameter] public bool ShowInfoArea { get; set; } = true;

	private Color _selectedColor = Color.Blue;
	[Parameter] public Color SelectedColor 
	{ 
		get => _selectedColor;
		set
		{
			if (_selectedColor.Name != value.Name)
			{
				_selectedColor = value;
				//RGB to HSL
				var hsl = HslColor.FromRgb(value);
				_hue = (int)Math.Round(hsl.Hue);

				WriteDiag($"SelectedColor.Set() changed Hue: '{_hue}', Saturation: '{hsl.Luminosity}', Luminosity: '{hsl.Saturation}' HEX: '{ColorTranslator.ToHtml(SelectedColor)}'.");

				//TODO: Position is not correct not all color is at the corner if saturation!=100 or luminosity!=50.0
				@*_selectorThumbLeft = HueAreaWidth - (_selectorThumbSize / 2);
				_selectorThumbTop = 0 - (_selectorThumbSize / 2);
				SetSliderColorAsync();*@

				var hslColor = new HslColor(_hue, 100, 50);
				var hueColor = (Color)hslColor;
				_sliderThumbHex = ColorTranslator.ToHtml(hueColor);

				_selectorThumbLeft = MathExtensions.ReverseLinearInterpolationCalculator(0, 255, _hueAreaWidth, hueColor.B, _selectedColor.B) - (_selectorThumbSize / 2);
				_selectorThumbTop = MathExtensions.ReverseLinearInterpolationCalculator(0, hueColor.B, _hueAreaHeight, 0, _selectedColor.B) - (_selectorThumbSize / 2);
			}
		}
	}

	[Parameter] public EventCallback<Color> OnColorChanged { get; set; }

	//Slider event
	private async Task HueChanged(ChangeEventArgs e)
	{
		var val = int.Parse(e?.Value?.ToString());
		if(_hue == val)
		{
			return;
		}

		_hue = val;
		WriteDiag($"{nameof(HueChanged)} Hue sliced changed Hue: '{_hue}'.");

		await SetSliderColorAsync();
	}

	private async Task SetSliderColorAsync()
	{
		// Hue: slider value, saturation: 100.0 (full), luminosity: 50.0 (normal)
		var hslColor = new HslColor(_hue, 100, 50);
		var hueColor = (Color)hslColor;

		_sliderThumbHex = ColorTranslator.ToHtml(hueColor);

		await GetBilinearColor(_selectorThumbLeft +(_selectorThumbSize / 2), _selectorThumbTop + (_selectorThumbSize / 2), hueColor);
	}

	//Click
	private async Task ClickInColor(MouseEventArgs args)
	{
		WriteDiag($"{nameof(ClickInColor)} Color selector area activated at X: '{args.OffsetX}', Y: '{args.OffsetY}', Hue: '{_hue}', HueColor: '{_sliderThumbHex}'.");

		var left = (int)Math.Round(args.OffsetX - (_selectorThumbSize / 2));
		var top = (int)Math.Round(args.OffsetY - (_selectorThumbSize / 2));

		if(left == _selectorThumbLeft && top == _selectorThumbTop)
		{
			return;
		}		

		_selectorThumbLeft = left;
		_selectorThumbTop = top;

		await GetBilinearColor(args.OffsetX, args.OffsetY, ColorTranslator.FromHtml(_sliderThumbHex));
	}
	private async Task ClickInHandler(MouseEventArgs args)
	{
		if(_handlerDragging)
		{
			return;
		}

		args.OffsetX += _selectorThumbLeft;
		args.OffsetY += _selectorThumbTop;

		await ClickInColor(args);
	}

	//Drag
	private string _moveEventId;
	private string _mouseUpEventId;
	private async Task DragStart(MouseEventArgs args)
	{
		_handlerDragging = true;
		WriteDiag($"{nameof(DragStart)} Color picker dragging started allowed: '{_handlerDragging}'.");

		_moveEventId = await _globalMouseEventHandler.RegisterPageMouseMoveAsync(Dragging);
		_mouseUpEventId = await _globalMouseEventHandler.RegisterPageMouseUpAsync(DragEnd);
	}
	private async Task Dragging(MouseEventArgs args)
	{
		if(_handlerDragging)
		{
			WriteDiag($"{nameof(Dragging)} Color picker dragging allowed: '{_handlerDragging}' X: '{args.ClientX}', Y: '{args.ClientY}', Color DIV Left: '{_colorPickerRect.Left}', Top: '{_colorPickerRect.Top}'.");

			args.OffsetX = args.ClientX - _colorPickerRect.Left; //x position within the element.
			args.OffsetY = args.ClientY - _colorPickerRect.Top;  //y position within the element.
			
			if(args.OffsetX < 0)
				args.OffsetX = 0;
			if(args.OffsetX > HueAreaWidth)
				args.OffsetX = HueAreaWidth;
			if(args.OffsetY < 0)
				args.OffsetY = 0;
			if(args.OffsetY > HueAreaHeight)
				args.OffsetY = HueAreaHeight;

			await ClickInColor(args);
			StateHasChanged(); //External event listener..
		}
	}
	private async Task DragEnd(MouseEventArgs args)
	{
		await Task.Delay(50); //MouseUp triggers click in handler Wait to 'ClickInHandler' run! Also events can be removed added during drag...

		_handlerDragging = false;
		WriteDiag($"{nameof(DragEnd)} Color picker dragging ended allowed: '{_handlerDragging}'.");

		await _globalMouseEventHandler.RemovePageMouseMoveAsync(_moveEventId);
		await _globalMouseEventHandler.RemovePageMouseUpAsync(_mouseUpEventId);
	}

	//Calculations
	private async Task GetBilinearColor(double x, double y, Color mainColor)
	{
		var r = BilinearInterpolationCalculator(x, y, mainColor.R);
		var g = BilinearInterpolationCalculator(x, y, mainColor.G);
		var b = BilinearInterpolationCalculator(x, y, mainColor.B);

		var bilinearColor = Color.FromArgb(r, g, b);
		_selectorThumbHex = ColorTranslator.ToHtml(bilinearColor);

		_selectedColor = bilinearColor;
		
		WriteDiag($"{nameof(GetBilinearColor)}: calculated values R: '{r}', G: '{g}', B: '{b}', selected Color HEX: '{_selectorThumbHex}'.");

		if(OnColorChanged.HasDelegate)
		{
			await OnColorChanged.InvokeAsync(bilinearColor);
		}
	}
	private int BilinearInterpolationCalculator(double x, double y, int q21)
	{
		var p = MathExtensions.BilinearInterpolationCalculator(
		0, 0, HueAreaWidth, HueAreaHeight, //0,0 to DIV height/width
		x, y,	//Click pos
		255,	//Top-R = white
		0,		//Bottom-R = black
		q21,	//Top-L = Q21, Hue value 
		0);     //Bottom-L = black

		if (p < 0)
			return 0;

		if (p > 255)
			return 255;

		return (int)Math.Round(p);
	}

	private void WriteDiag(string message)
	{
		_logger.LogDebug($"Component {this.GetType()}: {message}");
	}

	public async ValueTask DisposeAsync()
	{
		if (_globalMouseEventHandler is not null)
		{
			await _globalMouseEventHandler.DisposeAsync();
		}
	}
}