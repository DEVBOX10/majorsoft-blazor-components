@using System.Timers

@inherits InputTextArea
@implements IDisposable
@inject ILogger<DebounceInputText> _logger;

<textarea @ref="_inputRef" value="@CurrentValue" class="@CssClass" @oninput="OnTextChange" @onblur="OnBlur" @onkeypress="OnKeyPress" @attributes="AdditionalAttributes" />

@*
	Diffs with DebounceTimerBase:
	- value="@CurrentValue"
	- remove: [Parameter] public string? Value { get; set; }
	- remove: public Dictionary<string, object> AdditionalAttributes { get; set; }
	- remove: [Parameter] public EventCallback<string> OnInput { get; set; }
	- OnTextChange(): CurrentValue = e.Value?.ToString();
*@

@code {
	private bool _notifiedLastChange = false;
	private bool _disposedValue;
	private bool _debounceEnabled = true;

	private ElementReference _inputRef;
	/// <summary>
	/// Exposes a Blazor ElementReference of the wrapped around HTML element. It can be used e.g. for JS interop, etc.
	/// </summary>
	public ElementReference InnerElementReference => _inputRef;

	private double _intervalInMilisec = 200;
	/// <summary>
	/// Notification debounce timeout in ms. If set to 0 notifications happens immediately. -1 disables automatic notification completely. 
	/// Notification will only happen by pressing Enter key or onblur, if set.
	/// </summary>
	[Parameter] public double DebounceTime
	{
		get => _intervalInMilisec;
		set
		{
			if (value == _intervalInMilisec)
			{
				return;
			}

			SetTimer(value);
		}
	}

	/// <summary>
	/// Minimal length of text to start notify, if value is shorter than MinLength, there will be notifications with empty value "".
	/// </summary>
	[Parameter] public int MinLength { get; set; } = 0;
	/// <summary>
	/// Notification of current value will be sent immediately by hitting Enter key. Enabled by-default. 
	/// Notification will obey MinLength rule, if length is less, then empty value "" will be sent back.
	/// </summary>
	[Parameter] public bool ForceNotifyByEnter { get; set; } = true;
	/// <summary>
	/// Same as ForceNotifyByEnter but notification triggered onblur event, when focus leaves the input field.
	/// </summary>
	[Parameter] public bool ForceNotifyOnBlur { get; set; } = true;

	//Events
	/// <summary>
	/// Callback function called when value was changed (debounced) with field value passed into.
	/// </summary>
	[Parameter] public EventCallback<string> OnValueChanged { get; set; }

	private Timer _timer;
	protected override void OnInitialized()
	{
		_timer = new Timer();
		SetTimer(DebounceTime);
		_timer.Elapsed += OnElapsed;
		_timer.AutoReset = false;

		WriteDiag($"Initialized with Value: '{CurrentValue}', Timer interval: '{DebounceTime}' ms, MinLength: '{MinLength}', DebounceEnabled: {_debounceEnabled}.");
		base.OnInitialized();
	}

	protected void OnTextChange(ChangeEventArgs e)
	{
		WriteDiag($"OnTextChange event: '{e.Value}', DebounceEnabled: {_debounceEnabled}, timer interval: {_intervalInMilisec}");
		_timer.Stop(); //Stop previous timer

		_notifiedLastChange = false;
		CurrentValue = e.Value?.ToString();

		if (_intervalInMilisec == 0) //Notify immediatelly
		{
			Notify();
		}

		if (!_debounceEnabled) //Do not notify
		{
			return;
		}

		_timer.Start(); //Re-start timer
	}
	protected void OnBlur(FocusEventArgs e)
	{
		WriteDiag($"OnBlur event: '{e.Type}', ForceNotifyOnBlur: {ForceNotifyOnBlur}, DebounceEnabled: {_debounceEnabled}");

		if (ForceNotifyOnBlur)
		{
			_timer.Stop(); //Stop timer
			Notify();
		}
	}
	protected void OnKeyPress(KeyboardEventArgs e)
	{
		WriteDiag($"OnKeyPress event: '{e.Key}', ForceNotifyByEnter: {ForceNotifyByEnter}, DebounceEnabled: {_debounceEnabled}");

		if (ForceNotifyByEnter && (e.Key?.Equals("Enter", StringComparison.OrdinalIgnoreCase) ?? false))
		{
			_timer.Stop(); //Stop timer
			Notify();
		}
	}

	protected void OnElapsed(object source, ElapsedEventArgs e)
	{
		WriteDiag($"Timer triggered after: '{DebounceTime}' ms delay, DebounceEnabled: {_debounceEnabled}, Value: '{CurrentValue}'");

		Notify();
	}

	private void Notify()
	{
		if (_notifiedLastChange)
		{
			WriteDiag($"Notify event was already sent NotifiedLastChange: {_notifiedLastChange}");
			return;
		}

		WriteDiag($"Start ValueChanged notification with length check. CurrentValue: '{CurrentValue}' length is {CurrentValue?.Length}, required MinLength: {MinLength} ");
		var invokeValue = CurrentValue?.Length >= MinLength
			? CurrentValue
			: string.Empty;

		InvokeAsync(async () =>
		{
			WriteDiag($"Invoke ValueChanged event with: '{invokeValue}'");

			_notifiedLastChange = true;
			await OnValueChanged.InvokeAsync(invokeValue);
		});
	}

	private void SetTimer(double value)
	{
		if (_timer is not null)
		{
			_timer.Stop();
		}

		_intervalInMilisec = value;
		if (value <= -1)
		{
			_debounceEnabled = false;
			return;
		}
		if (value == 0) //Timer cannot handle 0
		{
			_debounceEnabled = true;
			return;
		}

		_debounceEnabled = true;
		if (_timer is not null)
		{
			_timer.Interval = _intervalInMilisec;
			_timer.AutoReset = false;
		}
	}

	private void WriteDiag(string message)
	{
		_logger.LogDebug($"Component {this.GetType()}: {message}");
	}


	protected virtual void Dispose(bool disposing)
	{
		if (!_disposedValue)
		{
			if (disposing)
			{
				_timer.Elapsed -= OnElapsed;
				_timer.Dispose();
			}

			_disposedValue = true;
		}
	}

	/// <summary>
	/// Dispose component
	/// </summary>
	public void Dispose()
	{
		// Do not change this code. Put cleanup code in 'Dispose(bool disposing)' method
		Dispose(disposing: true);
		GC.SuppressFinalize(this);
	}
}