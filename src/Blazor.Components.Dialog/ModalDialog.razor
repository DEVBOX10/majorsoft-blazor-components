@inject ILogger<ModalDialog> _logger;
@inject IJSRuntime _jsRuntime;

@implements IAsyncDisposable

<div class="bmodal @(Animate ? "fade": "")" @onclick="OverlayClicked" @onclick:stopPropagation="true" @onkeyup="OverlayKeyPress"
		style="opacity: @_opacity; background-color: rgba(@OverlayBackgroundColor, @OverlayOpacity.ToString("0.00", CultureInfo.InvariantCulture))" 
		 hidden="@(!_isOpened)" @attributes=AllOtherAttributes>
	<div @ref="_modal" class="bmodal-content dynamicStyle" tabindex="0" @onclick:stopPropagation="true" >
		
		@if(Header != null || ShowCloseButton)
		{
			<div class="bmodal-header">
				@Header
				@if(ShowCloseButton)
				{
					<button type="button" @onclick="CloseClicked" class="close"><span aria-hidden="true">x</span><span class="sr-only">Close</span></button>
				}
			</div>
		}
		<div class="bmodal-body">@Content</div>
		@if(Footer != null)
		{
			<div class="bmodal-footer">@Footer</div>
		}
	</div>
</div>

<style>
	.fade {
		transition: opacity @(_animationDuration.ToString().Replace(",", "."))s linear;
	}
	.dynamicStyle {
		top: @(_dialogTop) 
		left: 50%;
		max-width:@(MaxWidth)px; 
		max-height:@(MaxHeight)px; 
		width:@(Width == 0 ? "auto": $"{Width}px"); 
		height:@(Height == 0 ? "auto": $"{Height}px");
		transition: top @((_animationDuration).ToString().Replace(',', '.'))s ease-in-out;
	}
</style>

@code {
	private bool _disposedValue;
	private bool _isOpened = false;
	private double _opacity = 0;
	private double _animationDuration = 0.25;
	private ElementReference _modal;
	private ElementReference _previousFocusedElement;
	private JSObjectReference _focusJs;

	//Overlay style
	private string _overlayColor = "128,128,128";//gray
	[Parameter] 
	public string OverlayBackgroundColor
	{
		get => _overlayColor;
		set => _overlayColor = new HtmlColor(value)?.RgbColor?.ToString();
	}
	[Parameter] public double OverlayOpacity { get; set; } = 0.9;

	//Close settings
	[Parameter] public bool CloseOnOverlayClick { get; set; } = true;
	[Parameter] public bool CloseOnEscapeKey { get; set; } = true;

	//Size
	[Parameter] public double Height { get; set; } = 0;
	[Parameter] public double Width { get; set; } = 0;
	[Parameter] public double MaxHeight { get; set; } = 1000;
	[Parameter] public double MaxWidth { get; set; } = 1000;

	[Parameter] public bool Focus { get; set; } = true; //TODO: focusing the original element does not work...
	[Parameter] public bool Animate { get; set; } = true;
	[Parameter] public bool Centered { get; set; } = true;

	//Contents
	[Parameter] public RenderFragment Header { get; set; }
	[Parameter] public RenderFragment Content { get; set; }
	[Parameter] public RenderFragment Footer { get; set; }
	[Parameter] public bool ShowCloseButton { get; set; } = true;

	//Events
	[Parameter] public EventCallback OnOpen { get; set; }
	[Parameter] public EventCallback OnClose { get; set; }
	[Parameter] public EventCallback OnCloseButtonClicked { get; set; }
	[Parameter] public EventCallback OnOverlayClicked { get; set; }
	[Parameter] public EventCallback OnEscapeKeyPress { get; set; }

	[Parameter(CaptureUnmatchedValues = true)]
	public Dictionary<string, object> AllOtherAttributes { get; set; }

	public bool IsOpen => _isOpened;

	protected override async Task OnInitializedAsync()
	{
		WriteDiag($"OnInitializedAsync currently IsOpened: '{_isOpened}'.");
		_focusJs = await _jsRuntime.InvokeAsync<JSObjectReference>("import", "./_content/Majorsoft.Blazor.Components.Dialog/focus.min.js");

		_dialogTop = GetDialogTop();
	}

	private async Task OverlayClicked(MouseEventArgs e)
	{
		if(CloseOnOverlayClick && _isOpened)
		{
			WriteDiag($"Overlay DIV clicked dialog closing, currently IsOpened: '{_isOpened}'.");
			if(OnOverlayClicked.HasDelegate)
			{
				await OnOverlayClicked.InvokeAsync();
			}

			await Close();
		}
	}
	private async Task CloseClicked(MouseEventArgs e)
	{
		if(ShowCloseButton && _isOpened)
		{
			WriteDiag($"Close button clicked dialog closing, currently IsOpened: '{_isOpened}'.");

			if(OnCloseButtonClicked.HasDelegate)
			{
				await OnCloseButtonClicked.InvokeAsync();
			}

			await Close();
		}
	}
	private async Task OverlayKeyPress(KeyboardEventArgs e)
	{
		if (CloseOnEscapeKey && (e.Key?.Equals("Escape", StringComparison.OrdinalIgnoreCase) ?? false) && _isOpened)
		{
			WriteDiag($"Overlay DIV key pressed event: '{e.Key}' dialog closing, currently IsOpened: '{_isOpened}'.");

			if(OnEscapeKeyPress.HasDelegate)
			{
				await OnEscapeKeyPress.InvokeAsync();
			}

			await Close();
		}
	}

	private string _dialogTop;
	private string _dialogDefaultTop =>  Centered ? "25%;" : "5%;";
	private string GetDialogTop()
	{
		return Centered ? "50%;" : $"calc({(Height == 0 ? 14 : 4)}% + {(int)(Height/2)}px);";
	}
	public async Task Open()
	{
		if(Focus)
		{
			//TODO: call fails....
			@*_previousFocusedElement = await _focusJs.InvokeAsync<ElementReference>("getFocusedElement");*@
		}

		_isOpened = true;
		WriteDiag($"Opening dialog currently IsOpened: '{_isOpened}'.");

		if(Animate)
		{			
			_dialogTop = _dialogDefaultTop;
			WriteDiag($"Opening dialog Waiting some time for UI to render and set Opacity to 1 IsOpened: '{_isOpened}'.");
			await Task.Delay((int)(_animationDuration * 100)); //TODO: time is not exact, Render happens before but DIV is hidden!!
		}
		_opacity = 1.0;

		if (OnOpen.HasDelegate)
		{
			WriteDiag($"Opening dialog calling {nameof(OnOpen)} event handlers IsOpened: '{_isOpened}'.");
			await OnOpen.InvokeAsync();
		}

		if(Focus)
		{
			WriteDiag($"Opening dialog setting Focus to dialog IsOpened: '{_isOpened}'.");
			await _focusJs.InvokeAsync<string>("focusElement", _modal);
			@*await _modal.FocusAsync();*@
		}

		_dialogTop = GetDialogTop();

	}
	public async Task Close()
	{
		_opacity = 0;
		if(Animate)
		{
			_dialogTop = _dialogDefaultTop;
			WriteDiag($"Opening dialog Waiting for UI to play CSS fade and set Opacity to 0 IsOpened: '{_isOpened}'.");
			await Task.Delay((int)(_animationDuration * 1000));
		}

		_isOpened = false;
		WriteDiag($"Closing dialog currently IsOpened: '{_isOpened}'.");

		if (OnClose.HasDelegate)
		{
			WriteDiag($"Opening dialog calling {nameof(Close)} event handlers IsOpened: '{_isOpened}'.");
			await OnClose.InvokeAsync();
		}
		
		if(Focus)
		{
			await _focusJs.InvokeAsync<string>("focusElement", _previousFocusedElement);
		}

		_dialogTop = GetDialogTop();
	}

	private void WriteDiag(string message)
	{
		_logger.LogDebug($"Component {this.GetType()}: {message}");
	}

	public async ValueTask DisposeAsync()
	{
		if(_focusJs != null)
		{
			await _focusJs.DisposeAsync();
		}
	}
}