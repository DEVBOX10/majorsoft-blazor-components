@inject ILogger<ModalDialog> _logger;
@inject IJSRuntime _jsRuntime;
@inject ITransitionEventsService _transitionService;

@implements IAsyncDisposable

@if(_isOpened)
{
	<div @ref="_overlayDiv" class="bmodal @(Animate ? "fade": "")" @onclick="OverlayClicked" @onkeyup="OverlayKeyPress"
			style="opacity: @_opacity; background-color: rgba(@OverlayBackgroundColor, @OverlayOpacity.ToString("0.00", CultureInfo.InvariantCulture))" 
			@attributes=AllOtherAttributes>
		<div @ref="_modal" class="bmodal-content dynamicStyle" tabindex="100" @onclick:stopPropagation="true" >
		
			@if(Header != null || ShowCloseButton)
			{
				<div class="bmodal-header">
					@Header
					@if(ShowCloseButton)
					{
						<button type="button" @onclick="CloseClicked" class="close"><span aria-hidden="true">x</span><span class="sr-only">Close</span></button>
					}
				</div>
			}
			<div class="bmodal-body">@Content</div>
			@if(Footer != null)
			{
				<div class="bmodal-footer">@Footer</div>
			}
		</div>
	</div>

	<style>
		.fade {
			transition: opacity @(_animationDuration.ToString().Replace(",", "."))s linear;
		}
		.dynamicStyle {
			top: @(_dialogTop)
			left: 50%;
			min-width:@(MinWidth)px;
			min-height:@(MinHeight)px;
			width:@(Width == 0 ? "auto": $"{Width}px");
			height:@(Height == 0 ? "auto": $"{Height}px");
			transition: top @((_animationDuration).ToString().Replace(',', '.'))s ease-in-out;
		}
	</style>
}

@code {
	private bool _disposedValue;
	private bool _isOpened = false;
	private double _opacity = 0;
	private double _animationDuration = 0.25;
	private ElementReference _overlayDiv;
	private ElementReference _modal;

	private JSObjectReference _previousFocusedElement;
	private JSObjectReference _focusJs;

	//Overlay style
	private string _overlayColor = "128,128,128";//gray
	[Parameter] 
	public string OverlayBackgroundColor
	{
		get => _overlayColor;
		set => _overlayColor = new HtmlColor(value)?.RgbColor?.ToString();
	}
	[Parameter] public double OverlayOpacity { get; set; } = 0.9;

	//Close settings
	[Parameter] public bool CloseOnOverlayClick { get; set; } = true;
	[Parameter] public bool CloseOnEscapeKey { get; set; } = true;

	//Size
	[Parameter] public double Height { get; set; } = 0;
	[Parameter] public double Width { get; set; } = 0;
	[Parameter] public double MinHeight { get; set; } = 200;
	[Parameter] public double MinWidth { get; set; } = 200;

	[Parameter] public bool Focus { get; set; } = true;
	[Parameter] public bool Animate { get; set; } = true;
	[Parameter] public bool Centered { get; set; } = false;

	//Contents
	[Parameter] public RenderFragment Header { get; set; }
	[Parameter] public RenderFragment Content { get; set; }
	[Parameter] public RenderFragment Footer { get; set; }
	[Parameter] public bool ShowCloseButton { get; set; } = true;

	//Events
	[Parameter] public EventCallback OnOpen { get; set; }
	[Parameter] public EventCallback OnClose { get; set; }
	[Parameter] public EventCallback<MouseEventArgs> OnCloseButtonClicked { get; set; }
	[Parameter] public EventCallback<MouseEventArgs> OnOverlayClicked { get; set; }
	[Parameter] public EventCallback<KeyboardEventArgs> OnEscapeKeyPress { get; set; }
	[Parameter] public EventCallback<TransitionEventArgs[]> OnTransitionEnded { get; set; }

	[Parameter(CaptureUnmatchedValues = true)]
	public Dictionary<string, object> AllOtherAttributes { get; set; }

	public bool IsOpen => _isOpened;

	protected override async Task OnInitializedAsync()
	{
		WriteDiag($"OnInitializedAsync currently IsOpened: '{_isOpened}'.");

#if DEBUG
		_focusJs = await _jsRuntime.InvokeAsync<JSObjectReference>("import", "./_content/Majorsoft.Blazor.Components.Dialog/focus.js");
#else
		_focusJs = await _jsRuntime.InvokeAsync<JSObjectReference>("import", "./_content/Majorsoft.Blazor.Components.Dialog/focus.min.js");
#endif		
		_dialogTop = _dialogDefaultTop;
	}

	private async Task OverlayClicked(MouseEventArgs e)
	{
		if(CloseOnOverlayClick && _isOpened)
		{
			WriteDiag($"Overlay DIV clicked dialog closing, currently IsOpened: '{_isOpened}'.");
			if(OnOverlayClicked.HasDelegate)
			{
				await OnOverlayClicked.InvokeAsync(e);
			}

			await Close();
		}
	}
	private async Task CloseClicked(MouseEventArgs e)
	{
		if(ShowCloseButton && _isOpened)
		{
			WriteDiag($"Close button clicked dialog closing, currently IsOpened: '{_isOpened}'.");

			if(OnCloseButtonClicked.HasDelegate)
			{
				await OnCloseButtonClicked.InvokeAsync(e);
			}

			await Close();
		}
	}
	private async Task OverlayKeyPress(KeyboardEventArgs e)
	{
		if (CloseOnEscapeKey && (e.Key?.Equals("Escape", StringComparison.OrdinalIgnoreCase) ?? false) && _isOpened)
		{
			WriteDiag($"Overlay DIV key pressed event: '{e.Key}' dialog closing, currently IsOpened: '{_isOpened}'.");

			if(OnEscapeKeyPress.HasDelegate)
			{
				await OnEscapeKeyPress.InvokeAsync(e);
			}

			await Close();
		}
	}

	//Dialog style animation params
	private string _dialogTop;
	private string _dialogDefaultTop =>  Centered ? "25%;" : "5%;";
	private string GetDialogTop()
	{
		return Centered ? "50%;" : $"calc({(Height == 0 ? 15 : 2)}% + {(int)(Height/2)}px);";
	}

	private async Task TransitionEnded(TransitionEventArgs[] args)
	{
		if(Animate)
		{
			if(OnTransitionEnded.HasDelegate)
			{
				await OnTransitionEnded.InvokeAsync(args);
			}

			WriteDiag($"Dialog Transition has ended IsOpened: '{_isOpened}', TransitionEventArgs[] count: '{args.Length}'!!");
			if (_opacity == 1) //Visible
			{
				await OpenInternal(); 
			}
			else if (_opacity == 0) //Hidden
			{
				await CloseInternal();
			}
		}
	}

	private KeyValuePair<ElementReference, string>[] _elementRefsWithProperties;
	public async Task Open()
	{
		_dialogTop = _dialogDefaultTop;//Reset dialog to page top
		_isOpened = true;
		WriteDiag($"Opening dialog currently, Opacity: {_opacity}, IsOpened: '{_isOpened}'.");

		if(Animate)
		{
			WriteDiag($"Opening dialog Waiting some time for UI to render and set Opacity to 1 IsOpened: '{_isOpened}'.");
			await Task.Delay((int)(_animationDuration * 100)); //HACK: Must wait, time is not exact.. Render happens before but DIV is still not visible!!

			_elementRefsWithProperties = new KeyValuePair<ElementReference, string>[]
			{ 
				new KeyValuePair<ElementReference, string>(_overlayDiv, "opacity"), 
				new KeyValuePair<ElementReference, string>(_modal, "top") 
			};
			await _transitionService.RegisterTransitionsWhenAllEndedAsync(TransitionEnded, _elementRefsWithProperties);

			_dialogTop = GetDialogTop();
			_opacity = 1.0; //dialog must be visible

			return;
		}
		else
		{
			_dialogTop = GetDialogTop();
			_opacity = 1.0; //dialog must be visible
		}

		await OpenInternal();
	}
	private async Task OpenInternal()
	{
		if(Focus)
		{
			//Get previous element
			_previousFocusedElement = await _focusJs.InvokeAsync<JSObjectReference>("getFocusedElement");

			//Set focus to DIV
			WriteDiag($"Opening dialog setting Focus to dialog, previous IsOpened: '{_isOpened}'.");
			await _focusJs.InvokeAsync<string>("focusElement", _modal);
			@*await _modal.FocusAsync();*@
		}

		if (OnOpen.HasDelegate)
		{
			WriteDiag($"Opening dialog calling {nameof(OnOpen)} event handlers IsOpened: '{_isOpened}'.");
			await OnOpen.InvokeAsync();
		}
	}

	public async Task Close()
	{
		_opacity = 0; //Dialog must be hidden

		if(Animate)
		{
			WriteDiag($"Closing dialog Waiting for UI to play CSS fade and set Opacity to 0 IsOpened: '{_isOpened}'.");
			_dialogTop = _dialogDefaultTop;

			return;
		}

		await CloseInternal();
	}
	private async Task CloseInternal()
	{
		if(Animate)
		{
			await _transitionService.RemoveTransitionsWhenAllEndedAsync(_elementRefsWithProperties);
			_elementRefsWithProperties = null;
		}

		_isOpened = false;
		WriteDiag($"Closing dialog currently IsOpened: '{_isOpened}'.");

		if(Focus)
		{
			if(_previousFocusedElement is not null)
			{
				WriteDiag($"Closing dialog setting Focus IsOpened: '{_isOpened}'.");
				await _focusJs.InvokeVoidAsync("focusElement", _previousFocusedElement);
				//dispose
				await _previousFocusedElement.DisposeAsync();
			}
		}
		
		if (OnClose.HasDelegate)
		{
			WriteDiag($"Closing dialog calling {nameof(Close)} event handlers IsOpened: '{_isOpened}'.");
			await OnClose.InvokeAsync();
		}

		StateHasChanged(); //Force UI to render
	}

	private void WriteDiag(string message)
	{
		_logger.LogDebug($"Component {this.GetType()}: {message}");
	}

	public async ValueTask DisposeAsync()
	{
		WriteDiag($"Closing dialog running DisposeAsync() IsOpened: '{_isOpened}'.");

		if(_focusJs is not null)
		{
			await _focusJs.DisposeAsync();
		}
		if(_previousFocusedElement is not null)
		{
			await _previousFocusedElement.DisposeAsync();
		}
		if(_transitionService is not null)
		{
			await _transitionService.DisposeAsync();
		}
	}
}