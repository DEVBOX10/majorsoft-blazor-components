@inject ILogger<ModalDialog> _logger;
@inject IJSRuntime _jsRuntime;

@implements IAsyncDisposable

<div id="shit" @ref="_overlayDiv" class="bmodal @(Animate ? "fade": "")" @onclick="OverlayClicked" @onkeyup="OverlayKeyPress"
		style="opacity: @_opacity; background-color: rgba(@OverlayBackgroundColor, @OverlayOpacity.ToString("0.00", CultureInfo.InvariantCulture))" 
		 hidden="@(!_isOpened)" @attributes=AllOtherAttributes>
	<div @ref="_modal" class="bmodal-content dynamicStyle" tabindex="100" @onclick:stopPropagation="true" >
		
		@if(Header != null || ShowCloseButton)
		{
			<div class="bmodal-header">
				@Header
				@if(ShowCloseButton)
				{
					<button type="button" @onclick="CloseClicked" class="close"><span aria-hidden="true">x</span><span class="sr-only">Close</span></button>
				}
			</div>
		}
		<div class="bmodal-body">@Content</div>
		@if(Footer != null)
		{
			<div class="bmodal-footer">@Footer</div>
		}
	</div>
</div>

<style>
	.fade {
		transition: opacity @(_animationDuration.ToString().Replace(",", "."))s linear;
	}
	.dynamicStyle {
		top: @(_dialogTop) 
		left: 50%;
		max-width:@(MaxWidth)px; 
		max-height:@(MaxHeight)px; 
		width:@(Width == 0 ? "auto": $"{Width}px"); 
		height:@(Height == 0 ? "auto": $"{Height}px");
		transition: top @((_animationDuration).ToString().Replace(',', '.'))s ease-in-out;
	}
</style>

@using Blazor.Components.Dialog.CSS;
@code {
	private bool _disposedValue;
	private bool _isOpened = false;
	private double _opacity = 0;
	private double _animationDuration = 0.25;
	private ElementReference _overlayDiv;
	private ElementReference _modal;
	private ElementReference _previousFocusedElement;
	private JSObjectReference _focusJs;

	private TransitionEventsService _transitionService;

	//Overlay style
	private string _overlayColor = "128,128,128";//gray
	[Parameter] 
	public string OverlayBackgroundColor
	{
		get => _overlayColor;
		set => _overlayColor = new HtmlColor(value)?.RgbColor?.ToString();
	}
	[Parameter] public double OverlayOpacity { get; set; } = 0.9;

	//Close settings
	[Parameter] public bool CloseOnOverlayClick { get; set; } = true;
	[Parameter] public bool CloseOnEscapeKey { get; set; } = true;

	//Size
	[Parameter] public double Height { get; set; } = 0;
	[Parameter] public double Width { get; set; } = 0;
	[Parameter] public double MaxHeight { get; set; } = 1000;
	[Parameter] public double MaxWidth { get; set; } = 1000;

	[Parameter] public bool Focus { get; set; } = true;
	[Parameter] public bool Animate { get; set; } = true;
	[Parameter] public bool Centered { get; set; } = true;

	//Contents
	[Parameter] public RenderFragment Header { get; set; }
	[Parameter] public RenderFragment Content { get; set; }
	[Parameter] public RenderFragment Footer { get; set; }
	[Parameter] public bool ShowCloseButton { get; set; } = true;

	//Events
	[Parameter] public EventCallback OnOpen { get; set; }
	[Parameter] public EventCallback OnClose { get; set; }
	[Parameter] public EventCallback<MouseEventArgs> OnCloseButtonClicked { get; set; }
	[Parameter] public EventCallback<MouseEventArgs> OnOverlayClicked { get; set; }
	[Parameter] public EventCallback<KeyboardEventArgs> OnEscapeKeyPress { get; set; }
	[Parameter] public EventCallback<TransitionEndEventArgs> OnTransitionEnded { get; set; }

	[Parameter(CaptureUnmatchedValues = true)]
	public Dictionary<string, object> AllOtherAttributes { get; set; }

	public bool IsOpen => _isOpened;

	protected override async Task OnInitializedAsync()
	{
		WriteDiag($"OnInitializedAsync currently IsOpened: '{_isOpened}'.");
		_focusJs = await _jsRuntime.InvokeAsync<JSObjectReference>("import", "./_content/Majorsoft.Blazor.Components.Dialog/focus.min.js");
		
		_dialogTop = _dialogDefaultTop;

			//TODO Animations: INJECT it
			_transitionService = new TransitionEventsService(_jsRuntime);
		await _transitionService.RegisterTransitionEnded(_overlayDiv, TransitionEnded, "opacity");
	}

	private async Task OverlayClicked(MouseEventArgs e)
	{
		if(CloseOnOverlayClick && _isOpened)
		{
			WriteDiag($"Overlay DIV clicked dialog closing, currently IsOpened: '{_isOpened}'.");
			if(OnOverlayClicked.HasDelegate)
			{
				await OnOverlayClicked.InvokeAsync(e);
			}

			await Close();
		}
	}
	private async Task CloseClicked(MouseEventArgs e)
	{
		if(ShowCloseButton && _isOpened)
		{
			WriteDiag($"Close button clicked dialog closing, currently IsOpened: '{_isOpened}'.");

			if(OnCloseButtonClicked.HasDelegate)
			{
				await OnCloseButtonClicked.InvokeAsync(e);
			}

			await Close();
		}
	}
	private async Task OverlayKeyPress(KeyboardEventArgs e)
	{
		if (CloseOnEscapeKey && (e.Key?.Equals("Escape", StringComparison.OrdinalIgnoreCase) ?? false) && _isOpened)
		{
			WriteDiag($"Overlay DIV key pressed event: '{e.Key}' dialog closing, currently IsOpened: '{_isOpened}'.");

			if(OnEscapeKeyPress.HasDelegate)
			{
				await OnEscapeKeyPress.InvokeAsync(e);
			}

			await Close();
		}
	}

	//Dialog style animation params
	private string _dialogTop;
	private string _dialogDefaultTop =>  Centered ? "25%;" : "5%;";
	private string GetDialogTop()
	{
		return Centered ? "50%;" : $"calc({(Height == 0 ? 15 : 2)}% + {(int)(Height/2)}px);";
	}

	private async Task TransitionEnded(TransitionEndEventArgs args)
	{
		if(Animate)
		{
			WriteDiag($"Dialog Transition has ended IsOpened: '{_isOpened}'!! EventType: '{args.Type}', ReturnValue: '{args.ReturnValue}', PropertyName: '{args.PropertyName}'");
			if(_opacity == 1)
			{
				await OpenInternal(); 
			}
			else
			{
				await CloseInternal();
			}

			if(OnTransitionEnded.HasDelegate)
			{
				await OnTransitionEnded.InvokeAsync(args);
			}
		}
	}

	private string _tempId; //TODO: remove when ElementReference bug fixed
	public async Task Open()
	{
		_isOpened = true;
		WriteDiag($"Opening dialog currently, Opacity: {_opacity}, IsOpened: '{_isOpened}'.");

		if(Animate)
		{
			WriteDiag($"Opening dialog Waiting some time for UI to render and set Opacity to 1 IsOpened: '{_isOpened}'.");
			await Task.Delay((int)(_animationDuration * 100)); //HACK: Must wait, time is not exact.. Render happens before but DIV is still not visible!!

			_dialogTop = GetDialogTop();
			_opacity = 1.0; //dialog must be visible

			return;
		}
		else
		{
			_opacity = 1.0; //dialog must be visible
		}

		await OpenInternal();
	}
	private async Task OpenInternal()
	{
		if(Focus)
		{
			//Get previous element
			_tempId = await _focusJs.InvokeAsync<string>("getFocusedElementId");
			//TODO: ERROR call fails....
			@*_previousFocusedElement = await _focusJs.InvokeAsync<ElementReference>("getFocusedElement");*@

			//Set focus to DIV
			WriteDiag($"Opening dialog setting Focus to dialog, previous elementId '{_tempId}', IsOpened: '{_isOpened}'.");
			await _focusJs.InvokeAsync<string>("focusElement", _modal);
			@*await _modal.FocusAsync();*@
		}

		if (OnOpen.HasDelegate)
		{
			WriteDiag($"Opening dialog calling {nameof(OnOpen)} event handlers IsOpened: '{_isOpened}'.");
			await OnOpen.InvokeAsync();
		}
	}

	public async Task Close()
	{
		_opacity = 0; //Dialog must be hidden

		if(Animate)
		{
			WriteDiag($"Closing dialog Waiting for UI to play CSS fade and set Opacity to 0 IsOpened: '{_isOpened}'.");
			_dialogTop = _dialogDefaultTop;

			return;
		}

		await CloseInternal();
	}
	public async Task CloseInternal()
	{
		_isOpened = false;
		WriteDiag($"Closing dialog currently IsOpened: '{_isOpened}'.");

		if(Focus)
		{
			WriteDiag($"Closing dialog setting Focus to previous elementId '{_tempId}', IsOpened: '{_isOpened}'.");
			await _focusJs.InvokeAsync<string>("focusElementById", _tempId);
			//TODO: ERROR call fails....
			@*await _focusJs.InvokeAsync<string>("focusElement", _previousFocusedElement);*@
		}
		
		if (OnClose.HasDelegate)
		{
			WriteDiag($"Closing dialog calling {nameof(Close)} event handlers IsOpened: '{_isOpened}'.");
			await OnClose.InvokeAsync();
		}
	}

	private void WriteDiag(string message)
	{
		_logger.LogDebug($"Component {this.GetType()}: {message}");
	}

	public async ValueTask DisposeAsync()
	{
		if(_focusJs is not null)
		{
			await _focusJs.DisposeAsync();
		}
		if(_transitionService is not null)
		{
			await _transitionService.DisposeAsync();
		}
	}
}