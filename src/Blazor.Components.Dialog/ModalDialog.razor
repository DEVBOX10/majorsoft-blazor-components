@inject ILogger<ModalDialog> _logger;
@inject IJSRuntime _jsRuntime;

@implements IAsyncDisposable

<div class="modal @(Animate ? "fade": "")" @onclick="OverlayClicked" @onclick:stopPropagation="true"
		style="opacity: @_opacity; background-color: rgba(@OverlayBackgroundColor, @OverlayOpacity.ToString("0.0", CultureInfo.InvariantCulture))" 
		 hidden="@(!_isOpened)" @attributes=AllOtherAttributes>
	<div @ref="_modal" class="modal-content dynamicStyle" tabindex="0" @onclick:stopPropagation="true" >
		<div class="modal-header"></div>
		<div class="modal-body">@(Content)</div>
		<div class="modal-footer"></div>
	</div>
</div>

<style>
	.fade {
		transition: opacity @(_animationDuration.ToString().Replace(",", "."))s linear;
	}
	.dynamicStyle {
		top: @(Centered ? "50%;" : "33%;")
		left: 50%;
		max-width:@(MaxWidth)px; 
		max-height:@(MaxHeight)px; 
		width:@(Width == 0 ? "auto": $"{Width}px"); 
		height:@(Height == 0 ? "auto": $"{Height}px");
		transition:@((_animationDuration * 2).ToString().Replace(',', '.'))s ease-in-out;
	}
</style>


@code {
	private bool _disposedValue;
	private bool _isOpened = false;
	private double _opacity = 0;
	private double _animationDuration = 0.2;
	private ElementReference _modal;
	private ElementReference _previousFocusedElement;
	private JSObjectReference _focusJs;

	private string _overlayColor = "128,128,128";//gray
	[Parameter] 
	public string OverlayBackgroundColor
	{
		get => _overlayColor;
		set => _overlayColor = new HtmlColor(value)?.RgbColor?.ToString();
	}
	[Parameter] public double OverlayOpacity { get; set; } = 0.9;
	[Parameter] public bool CloseOnOverlayClick { get; set; } = true;

	[Parameter] public double Height { get; set; } = 0;
	[Parameter] public double Width { get; set; } = 0;
	[Parameter] public double MaxHeight { get; set; } = 1000;
	[Parameter] public double MaxWidth { get; set; } = 1000;

	[Parameter] public bool Focus { get; set; } = true; //TODO: focusing the original element does not work...
	[Parameter] public bool Animate { get; set; } = true;
	[Parameter] public bool Centered { get; set; } = true; //TODO: Centered looks good but top required total CSS rework...


	[Parameter] public RenderFragment Content { get; set; }

	[Parameter(CaptureUnmatchedValues = true)]
	public Dictionary<string, object> AllOtherAttributes { get; set; }

	[Parameter] public EventCallback OnOpen { get; set; }
	[Parameter] public EventCallback OnClose { get; set; }

	protected override async Task OnInitializedAsync()
	{
		WriteDiag($"OnInitializedAsync currently IsOpened: '{_isOpened}'.");
		_focusJs = await _jsRuntime.InvokeAsync<JSObjectReference>("import", "./_content/Blazor.Components.Dialog/focus.js");
	}

	private async Task OverlayClicked(MouseEventArgs e)
	{
		if(CloseOnOverlayClick && _isOpened)
		{
			WriteDiag($"Overlay DIV clicked dialog closing, currently IsOpened: '{_isOpened}'.");
			await Close();
		}
	}

	public async Task Open()
	{
		if(Focus)
		{
			//TODO: call fails....
			@*_previousFocusedElement = await _focusJs.InvokeAsync<ElementReference>("getFocusedElement");*@
		}

		_isOpened = true;
		WriteDiag($"Opening dialog currently IsOpened: '{_isOpened}'.");

		if(Animate)
		{
			WriteDiag($"Opening dialog Waiting some time for UI to render and set Opacity to 1 IsOpened: '{_isOpened}'.");
			await Task.Delay((int)(_animationDuration * 100)); //TODO: time is not exact, Render happens before but DIV is hidden!!
		}
		_opacity = 1.0;

		if (OnOpen.HasDelegate)
		{
			WriteDiag($"Opening dialog calling {nameof(OnOpen)} event handlers IsOpened: '{_isOpened}'.");
			await OnOpen.InvokeAsync();
		}

		if(Focus)
		{
			WriteDiag($"Opening dialog setting Focus to dialog IsOpened: '{_isOpened}'.");
			await _focusJs.InvokeAsync<string>("focusElement", _modal);
			@*await _modal.FocusAsync();*@
		}
	}
	public async Task Close()
	{
		_opacity = 0;
		if(Animate)
		{
			Height = 1;
			WriteDiag($"Opening dialog Waiting for UI to play CSS fade and set Opacity to 0 IsOpened: '{_isOpened}'.");
			await Task.Delay((int)(_animationDuration * 1000));
		}

		_isOpened = false;
		WriteDiag($"Closing dialog currently IsOpened: '{_isOpened}'.");

		if (OnClose.HasDelegate)
		{
			WriteDiag($"Opening dialog calling {nameof(Close)} event handlers IsOpened: '{_isOpened}'.");
			await OnClose.InvokeAsync();
		}
		
		if(Focus)
		{
			await _focusJs.InvokeAsync<string>("focusElement", _previousFocusedElement);
		}
	}

	private void WriteDiag(string message)
	{
		_logger.LogDebug($"Component {this.GetType()}: {message}");
	}

	public async ValueTask DisposeAsync()
	{
		if(_focusJs != null)
		{
			await _focusJs.DisposeAsync();
		}
	}
}