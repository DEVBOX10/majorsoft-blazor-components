<div @ref="_permaDiv" class="@(ShowIcon == ShowPermaLinkIcon.No ? "" : $"permaDiv{IconPosition.ToString()}")" @onmouseenter="MouseHover" @onmouseleave="MouseLeave">

<a name="@_permaLinkName"></a> @Content

@if(_showIcon || ShowIcon == ShowPermaLinkIcon.Always) {
	<img style="@_iconStyle" width="16" height="16" class="permaLink" src="@GetIconUrl()" @onclick="CopyUrl" />
}
</div>

<style>
	.permaDivLeft {
		display: flex;
		padding-left: 20px;
	}
	.permaDivRight {
		display: flex;
		padding-right: 20px;
	}
	.permaLink {
		display: block;
		margin-right: 3px;
		margin-left: 3px;
		cursor: pointer;
		/*pointer-events:none;*/
	}
</style>

@inject ILogger<PermaLinkElement> _logger;
@inject NavigationManager _navigationManager;

@code {
	private ElementReference _permaDiv;
	private DomRect _rect;
	private string _iconStyle;
	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		_rect = await _permaDiv.GetClientRectAsync();
		
		var tmp = GetIconStyle();
		if(_iconStyle != tmp)
		{
			_iconStyle = tmp;
			StateHasChanged();
		}
	}

	private bool _showIcon = false;
	private string _permaLinkName;
	[Parameter] public string PermaLinkName
	{ 
		get => _permaLinkName; 
		set
		{
			_permaLinkName = value?.Trim()?.Replace(" ", "-");
		}
	}

	[Parameter] public RenderFragment Content { get; set; }

	//Icon visibility, style...
	[Parameter] public ShowPermaLinkIcon ShowIcon { get; set; } = ShowPermaLinkIcon.OnHover;
	private PermaLinkIconPosition _iconPosition = PermaLinkIconPosition.Right;
	[Parameter] public PermaLinkIconPosition IconPosition 
	{ 
		get => _iconPosition;
		set
		{
			if (value != _iconPosition)
			{
				_iconPosition = value;
				_iconStyle = GetIconStyle();
				StateHasChanged();
			}
		}
	}
	[Parameter] public double IconMarginTop { get; set; } = 0;
	[Parameter] public PermaLinkStyle IconStyle { get; set; } = PermaLinkStyle.Normal;

	[Parameter(CaptureUnmatchedValues = true)]
	public Dictionary<string, object> AllOtherAttributes { get; set; }

	[Parameter] public EventCallback<string> OnPermaLinkCopied { get; set; }

	private void MouseHover()
	{
		if (_showIcon || ShowIcon != ShowPermaLinkIcon.OnHover)
			return;
			
		WriteDiag("------------ DIV Hovered! ---------");

		_showIcon = true;
	}
	private void MouseLeave()
	{
		if (!_showIcon || ShowIcon != ShowPermaLinkIcon.OnHover)
			return;

		WriteDiag("------------ DIV mouse LEAVE! ---------");

		_showIcon = false;
	}
	private async Task CopyUrl()
	{
		var uri = _navigationManager.Uri + $"#{_permaLinkName}";
		WriteDiag("Link was clicked copy URL: {uri}");

		//TODO: copy to clipboard

		if(OnPermaLinkCopied.HasDelegate)
		{
			await OnPermaLinkCopied.InvokeAsync(uri);
		}
	}

	private string GetIconStyle()
	{
		var res = "";
		if (IconPosition == PermaLinkIconPosition.Left)
		{
			res = $"left: {_rect?.Left}px; position: absolute;";
		}

		return $"{res} margin-top: {IconMarginTop}px;";
	}	
	private string GetIconUrl()
	{
		var img = IconStyle == PermaLinkStyle.Normal
			? "link2"
			: "link";

		return $"_content/Blazor.Components.PermaLink/{img}.svg";
	}

	private void WriteDiag(string message)
	{
		_logger.LogDebug($"Component {this.GetType()}: {message}");
	}
}