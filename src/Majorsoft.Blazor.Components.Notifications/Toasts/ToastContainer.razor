@if (_toastInternals.AllToasts.Any())
{
	<div style="max-width: @(Settings.Width)px; width: @(Settings.Width)px;" class="btoast-container @($"position-{Settings.Position.ToString().ToLower()}")"
		 @attributes="AllOtherAttributes">

		@foreach (var item in _toastInternals.AllToasts.OrderBy(x => x.NotificationTime))
		{
			WriteDiag($"Rendering Toast Id: '{item.Id}', IsVisible: '{item.IsVisible}'."); /*Must render all item to keep item settings*/
			<Toast Settings="item" OnOpen="OnItemOpen" OnClose="OnItemClose" OnCloseButtonClicked="OnItemToastCloseButtonClicked"/>

		}
	</div>
}

@namespace Majorsoft.Blazor.Components.Notifications

@inject ILogger<ToastContainer> _logger
@inject IToastService _toastService
@inject IToastInternals _toastInternals
@inject NavigationManager _navigationManager

@implements IDisposable

@code {
	private static bool Initialized = false;

	protected override void OnInitialized()
	{
		if (Initialized)
		{
			throw new ApplicationException($"Component: '{nameof(ToastContainer)}' is not allowed to have multiple instances. Please define it one your e.g.: 'MainLayout.razor' or some common place.");
		}
		Initialized = true;

		_toastService.CollectionChanged += Toasts_CollectionChanged;
		_navigationManager.LocationChanged += ClearToasts;
	}

	/// <summary>
	/// Toast container settings.
	/// </summary>
	[Parameter]
	public ToastContainerGlobalSettings Settings
	{
		get => _toastService.GlobalSettings;
		set
		{
			_toastService.GlobalSettings = value;
			StateHasChanged();
		}
	}

	//Events
	/// <summary>
	/// Callback function called when one of the Toast is opening.
	/// </summary>
	[Parameter] public EventCallback<Guid> OnToastOpen { get; set; }
	/// <summary>
	/// Callback function called when one of the Toast is closing.
	/// </summary>
	[Parameter] public EventCallback<Guid> OnToastClose { get; set; }
	/// <summary>
	/// Callback function called when close `x` button was clicked on one of the Toast.
	/// </summary>
	[Parameter] public EventCallback<Guid> OnToastCloseButtonClicked { get; set; }

	/// <summary>
	/// Blazor capture for any unmatched HTML attributes.
	/// </summary>
	[Parameter(CaptureUnmatchedValues = true)]
	public Dictionary<string, object> AllOtherAttributes { get; set; }

	private void Toasts_CollectionChanged(object? sender, NotifyCollectionChangedEventArgs e)
	{
		WriteDiag($"Toast collection changed: '{e.Action}', Toasts count: '{_toastInternals.AllToasts.Count()}'.");
		StateHasChanged();
	}
	private void ClearToasts(object? sender, LocationChangedEventArgs args)
	{
		WriteDiag($"Page location changed: '{args.Location}', RemoveToastsOnNavigation: '{Settings.RemoveToastsOnNavigation}'.");

		if (Settings.RemoveToastsOnNavigation)
		{
			_toastService.ClearAll();
			StateHasChanged();
		}
	}

	private async Task OnItemOpen(Guid id)
	{
		WriteDiag($"Toast Opened Id: '{id}'.");
		if(OnToastOpen.HasDelegate)
		{
			await OnToastOpen.InvokeAsync(id);
		}

		_toastInternals.TriggerToastOpen(id);
	}
	private async Task OnItemToastCloseButtonClicked(Guid id)
	{
		WriteDiag($"Toast Close button clicked Id: '{id}'.");
		if(OnToastCloseButtonClicked.HasDelegate)
		{
			await OnToastCloseButtonClicked.InvokeAsync(id);
		}

		_toastInternals.TriggerToastCloseButtonClicked(id);
	}
	private async Task OnItemClose(Guid id)
	{
		WriteDiag($"Toast Closed Id: '{id}', Count: {_toastInternals.AllToasts.Count()}.");
		if(_toastInternals.AllToasts.All(x => !x.IsVisible))
		{
			_toastService.ClearAll();
			WriteDiag($"All Toasts Closed and hidden, Count: {_toastInternals.AllToasts.Count()}.");
		}

		if (OnToastClose.HasDelegate)
		{
			await OnToastClose.InvokeAsync(id);
		}

		_toastInternals.TriggerToastClosed(id);
	}

	private void WriteDiag(string message)
	{
		_logger.LogDebug($"Component {this.GetType()}: {message}");
	}

	public void Dispose()
	{
		Initialized = false;

		_navigationManager.LocationChanged -= ClearToasts;

		_toastService.CollectionChanged -= Toasts_CollectionChanged;
		//_toastService.Dispose(); //Do not dispose singleton....
	}
}