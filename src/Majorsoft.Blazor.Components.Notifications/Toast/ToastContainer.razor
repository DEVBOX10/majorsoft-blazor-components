@if (_toastService.Toasts.Any())
{
	<div style="max-width: @(Width)px; width: @(Width)px;" class="btoast-container @($"position-{Position.ToString().ToLower()}")" @attributes="AllOtherAttributes">
		@foreach (var item in _toastService.Toasts.OrderBy(x => x.NotificationTime))
		{
			<Toast Settings="item" OnOpen="OnToastOpen" OnClose="OnToastClose" OnCloseButtonClicked="OnToastCloseButtonClicked"/>
		}
	</div>
}

@namespace Majorsoft.Blazor.Components.Notifications

@inject ILogger<ToastContainer> _logger
@inject IToastService _toastService
@inject NavigationManager _navigationManager

@implements IDisposable

@code {
	private static bool Initialized = false;

	protected override void OnInitialized()
	{
		if (Initialized)
		{
			throw new ApplicationException($"Component: '{nameof(ToastContainer)}' is not allowed to have multiple instances. Please define it one your e.g.: 'MainLayout.razor' or some common place.");
		}
		Initialized = true;

		_toastService.CollectionChanged += Toasts_CollectionChanged;

		if (RemoveToastsOnNavigation)
		{
			_navigationManager.LocationChanged += ClearToasts;
		}
	}

	/// <summary>
	/// 
	/// </summary>
	[Parameter] public bool RemoveToastsOnNavigation { get; set; }

	/// <summary>
	/// 
	/// </summary>
	[Parameter] public ToastPositions Position { get; set; } = ToastPositions.TopRight;

	/// <summary>
	/// 
	/// </summary>
	[Parameter] public int Width { get; set; } = 400;


	//Events
	/// <summary>
	/// Callback function called when one of the Toast is opening.
	/// </summary>
	[Parameter] public EventCallback<Guid> OnToastOpen { get; set; }
	/// <summary>
	/// Callback function called when one of the Toast is closing.
	/// </summary>
	[Parameter] public EventCallback<Guid> OnToastClose { get; set; }
	/// <summary>
	/// Callback function called when close `x` button was clicked on one of the Toast.
	/// </summary>
	[Parameter] public EventCallback<Guid> OnToastCloseButtonClicked { get; set; }

	/// <summary>
	/// Blazor capture for any unmatched HTML attributes.
	/// </summary>
	[Parameter(CaptureUnmatchedValues = true)]
	public Dictionary<string, object> AllOtherAttributes { get; set; }

	private void Toasts_CollectionChanged(object? sender, NotifyCollectionChangedEventArgs e)
	{

	}
	private void ClearToasts(object? sender, LocationChangedEventArgs args)
	{
		InvokeAsync(() =>
		{
			_toastService.ClearAll();
			StateHasChanged();
		});
	}

	private void WriteDiag(string message)
	{
		_logger.LogDebug($"Component {this.GetType()}: {message}");
	}

	public void Dispose()
	{
		Initialized = false;

		_navigationManager.LocationChanged -= ClearToasts;
		_toastService.CollectionChanged -= Toasts_CollectionChanged;
		_toastService.Dispose();
	}
}
