@if (_toastService.Toasts.Any())
{
	<div class="btoast-container @($"position-{Position.ToString().ToLower()}")">
		@foreach (var item in _toastService.Toasts.OrderBy(x => x.NotificationTime))
		{
			<Toast />
		}
	</div>
}

@namespace Majorsoft.Blazor.Components.Notifications

@inject ILogger<ToastContainer> _logger
@inject IToastService _toastService
@inject NavigationManager _navigationManager

@implements IAsyncDisposable

@code {
	private static bool Initialized = false;

	protected override void OnInitialized()
	{
		if (Initialized)
		{
			throw new ApplicationException($"Component: '{nameof(ToastContainer)}' is not allowed to have multiple instances. Please define it one your e.g.: 'MainLayout.razor' or some common place.");
		}
		Initialized = true;

		_toastService.CollectionChanged += Toasts_CollectionChanged;

		if (RemoveToastsOnNavigation)
		{
			_navigationManager.LocationChanged += ClearToasts;
		}

		//PositionClass = $"position-{Position.ToString().ToLower()}";
	}

	/// <summary>
	/// 
	/// </summary>
	[Parameter] public bool RemoveToastsOnNavigation { get; set; }

	/// <summary>
	/// 
	/// </summary>
	[Parameter] public ToastPositions Position { get; set; } = ToastPositions.TopRight;

	private void Toasts_CollectionChanged(object? sender, NotifyCollectionChangedEventArgs e)
	{

	}
	private void ClearToasts(object? sender, LocationChangedEventArgs args)
	{
		InvokeAsync(() =>
		{
			_toastService.ClearAll();
			StateHasChanged();
		});
	}

	private void WriteDiag(string message)
	{
		_logger.LogDebug($"Component {this.GetType()}: {message}");
	}

	public ValueTask DisposeAsync()
	{
		Initialized = false;

		_navigationManager.LocationChanged -= ClearToasts;
		_toastService.CollectionChanged -= Toasts_CollectionChanged;

		return ValueTask.CompletedTask;
	}
}
