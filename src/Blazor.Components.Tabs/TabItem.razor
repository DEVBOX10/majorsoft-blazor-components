@if (Parent.ActiveTab == this)
{
	<div class="@(Parent?.Animate ?? false ? "tabContentAnimate" : "") @(_visible ? "visible" : "")" @attributes=AllOtherAttributes>
		@Content
	</div>
}

@code {
	[CascadingParameter] private TabsPanel Parent { get; set; }

	protected override void OnInitialized()
	{
		if (Parent == null)
		{
			throw new ArgumentNullException(nameof(Parent), $"{nameof(TabItem)} must exist within a {nameof(TabsPanel)}");
		}

		Parent.AddTab(this);
	}

	private bool _visible = false;
	protected override void OnAfterRender(bool firstRender)
	{
		_visible = Parent.ActiveTab == this;
	}

	/// <summary>
	/// Required HTML content to show content of current TabItem.
	/// </summary>
	[Parameter] public RenderFragment Header { get; set; }
	/// <summary>
	/// Required HTML content to show Header content of current TabItem.
	/// </summary>
	[Parameter] public RenderFragment Content { get; set; }

	private bool _disabled = false;
	/// <summary>
	/// Determines whether all the rendered HTML elements should be disabled or not.
	/// </summary>
	[Parameter] public bool Disabled
	{
		get => _disabled;
		set
		{
			if (_disabled != value)
			{
				_disabled = value;
				Parent?.TabDisabled(this);
			}
		}
	}

	/// <summary>
	/// Blazor capture for any unmatched HTML attributes.
	/// </summary>
	[Parameter(CaptureUnmatchedValues = true)]
	public Dictionary<string, object> AllOtherAttributes { get; set; }
}