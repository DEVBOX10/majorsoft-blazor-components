<div @ref="_inputRef" class="tabsPanel" tabindex="200" disabled="@Disabled" @attributes=AllOtherAttributes>
	<div class="tabsHeader @TabPositon.ToString().ToLower()">
		@foreach (var tab in _tabs)
		{
			<button type="button" class="tabItem @GetButtonClass(tab)" @onclick=@(() => ActivateTab(tab)) disabled="@tab.Disabled"
					style="width: @(TabItemsWidth != 0 ? $"{TabItemsWidth}px" : "auto"); height: @(TabItemsHeight != 0 ? $"{TabItemsHeight}px" : "auto");">
				@tab.Header
			</button>
		}
	</div>

	<CascadingValue Value="this">
		@TabItems
	</CascadingValue>
</div>

<style>
	.tabItem {
		background-color: @($"rgb({InactiveColor})");
	}
	.tabItem.active {
		background-color: @($"rgb({ActiveColor})");
	}
	.tabItem.active:hover {
		background-color: @($"rgb({ActiveColor})");
	}
	.tabItem:hover {
		background-color: @($"rgb({HoverColor})");
	}
</style>

@using Blazor.Components.Core.HtmlColors;

@inject ILogger<TabsPanel> _logger;

@code {
	protected ElementReference _inputRef;
	/// <summary>
	/// Exposes a Blazor <see cref="ElementReference"/> of the wrapped around HTML element. It can be used e.g. for JS interop, etc.
	/// </summary>
	public ElementReference InnerElementReference => _inputRef;

	/// <summary>
	/// Required HTML content to set TabItems as <see cref="RenderFragment"/>.
	/// </summary>
	[Parameter] public RenderFragment TabItems { get; set; }

	private string _activeColor = "211,211,211";//lightGray
	/// <summary>
	/// Sets the `style` of the `background-color` when tab is Active. Use HTML specified: **Color Names**, **RGB**, **HEX** or with **HSL** values.
	/// </summary>
	[Parameter]
	public string ActiveColor
	{
		get => _activeColor;
		set => _activeColor = new HtmlColor(value)?.RgbColor.ToRgbString();
	}
	private string _inactiveColor = "255, 255, 255";//white
	/// <summary>
	/// Sets the `style` of the `background-color` when tab is not the Active tab. Use HTML specified: **Color Names**, **RGB**, **HEX** or with **HSL** values.
	/// </summary>
	[Parameter]
	public string InactiveColor
	{
		get => _inactiveColor;
		set => _inactiveColor = new HtmlColor(value)?.RgbColor.ToRgbString();
	}
	private string _hoverColor = "245, 245, 245";//WhiteSmoke
	/// <summary>
	/// Sets the `style` of the `background-color` when button is hovered over with mouse. Use HTML specified: **Color Names**, **RGB**, **HEX** or with **HSL** values.
	/// </summary>
	[Parameter]
	public string HoverColor
	{
		get => _hoverColor;
		set => _hoverColor = new HtmlColor(value)?.RgbColor.ToRgbString();
	}

	/// <summary>
	/// HTML element height in `px`.
	/// </summary>
	[Parameter] public int TabItemsHeight { get; set; } = 40;
	/// <summary>
	/// HTML element Width in `px`.
	/// </summary>
	[Parameter] public int TabItemsWidth { get; set; } = 100;
	/// <summary>
	/// Determines whether all the rendered HTML elements should be disabled or not.
	/// </summary>
	[Parameter] public bool Disabled { get; set; } = false;

	/// <summary>
	/// ???
	/// </summary>
	[Parameter] public bool Animate { get; set; } = false;
	/// <summary>
	/// Determines TabItems vertical positon {Left, Center, Right }
	/// </summary>
	[Parameter] public TabPositons TabPositon { get; set; } = TabPositons.Left;

	private IList<TabItem> _tabs = new List<TabItem>();
	/// <summary>
	/// Returns the number of <see cref="TabItem"/> int the given `TabsPanel`.
	/// </summary>
	public int TabCount => _tabs.Count;
	/// <summary>
	/// Returns all the <see cref="TabItem"/> reference added to the group. It can be used for activating any of the tabs.
	/// </summary>
	public IEnumerable<TabItem> Tabs => _tabs;

	private TabItem _activeTab;
	/// <summary>
	/// Returns all the <see cref="TabItem"/> reference added to the group. It can be used for activating any of the elements.
	/// </summary>
	[Parameter] public TabItem ActiveTab
	{
		get => _activeTab;
		set => ActivateTab(value);
	}

	/// <summary>
	/// Callback function called when other tab activated. Active TabItem is the callback parameter.
	/// </summary>
	[Parameter] public EventCallback<TabItem> OnTabChanged { get; set; }

	/// <summary>
	/// Blazor capture for any unmatched HTML attributes.
	/// </summary>
	[Parameter(CaptureUnmatchedValues = true)]
	public Dictionary<string, object> AllOtherAttributes { get; set; }

	internal void AddTab(TabItem tabPage)
	{
		WriteDiag($"{nameof(AddTab)}: {tabPage}");

		_tabs.Add(tabPage);
		if (_tabs.Count == 1)
		{
			ActiveTab = tabPage;
		}
	}
	internal void TabDisabled(TabItem tabPage)
	{
		if(ActiveTab == tabPage && tabPage.Disabled && _tabs.Count > 1)
		{
			var index = _tabs.IndexOf(tabPage);
			ActiveTab = _tabs[index == 0 ? 1 : --index]; 
		}
		StateHasChanged();
	}

	private string GetButtonClass(TabItem tab)
	{
		return tab == ActiveTab ? "active" : "";
	}
	private async Task ActivateTab(TabItem tab)
	{
		WriteDiag($"{nameof(ActivateTab)}: {tab}");

		if (_activeTab != tab)
		{
			_activeTab = tab;
			if (OnTabChanged.HasDelegate)
			{
				await OnTabChanged.InvokeAsync(ActiveTab);
			}
		}
	}

	private void WriteDiag(string message)
	{
		_logger.LogDebug($"Component {this.GetType()}: {message}");
	}
}
