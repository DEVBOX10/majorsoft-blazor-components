<h1>Css Events</h1>

<p>
	Blazor extensions and Components wrapper to notify on CSS Transition and Animation events. For usege see soruce code and docs on
	<a href="https://github.com/majorimi/blazor-components/blob/master/.github/docs/CssEvents.md" target="_blank">Github</a>.
</p>

<style>
	.divTransition {
		width: 150px;
		height: 100px;
		opacity: 1;
		background: red;
		-webkit-transition: width 2s, height 0.5s, opacity 1s; /* For Safari 3.1 to 6.0 */
		transition: width 2s, height 0.5s, opacity 1s;
	}

	.divTransition:hover {
		width: 400px;
		height: 150px;
		opacity: 0.5;
	}

	textarea {
		height: 150px !important;
	}
</style>

<div class="container-fluid p-3 mb-3 border rounded">
	<h3>CSS Transition events</h3>
	<p>
		Blazor <strong>Extension and Component wrapper</strong> to notify Blazor apps on CSS supported <strong>Transition</strong> events.
	</p>
	<div class="container-fluid p-1 mb-3 border border-bottom-0 border-right-0 border-left-0">
		<h4><code>TransitionElement</code> component with no filter</h4>
		<p>
			<strong>TransitionElement</strong> wraps around a DIV element which has 3 CSS <strong>Transitions</strong> for on hover: 
			<code>width 2s</code>, <code>height 0.5s</code>, <code>opacity 1s</code> properties.
			No property filter applied all transition ended events will fire in order of occurrence.
		</p>

		<div class="row pb-2">
			<div class="col-12 col-lg-8 col-xl-5">
				<TransitionElement OnTransitionEnded="OnTransitionEnded1">
					<Content>
						<div class="divTransition p-1">Hover over to start Transition</div>
					</Content>
				</TransitionElement>
			</div>
		</div>

		<div class="row pb-2">
			<div class="col-12 col-lg-8 col-xl-5">
				<label><strong>Event log</strong>:</label>
				<textarea @bind="_div1Log" class="form-control w-100" readonly></textarea>
			</div>
		</div>
	</div>

	<div class="container-fluid p-1 mb-3 border border-bottom-0 border-right-0 border-left-0">
		<h4><code>TransitionElement</code> component with <code>opacity</code> property filter</h4>
		<p>
			<strong>TransitionElement</strong> wraps around a DIV element which has 3 CSS <strong>Transitions</strong> for on hover: 
			<code>width 2s</code>, <code>height 0.5s</code>, <code>opacity 1s</code> properties.
			Property filter applied on <code>opacity</code> transition ended event only this will fire.
		</p>

		<div class="row pb-2">
			<div class="col-12 col-lg-8 col-xl-5">
				<TransitionElement TransitionPropertyName="opacity" OnTransitionEnded="OnTransitionEnded2">
					<Content>
						<div class="divTransition p-1">Hover over to start Transition</div>
					</Content>
				</TransitionElement>
			</div>
		</div>

		<div class="row pb-2">
			<div class="col-12 col-lg-8 col-xl-5">
				<label><strong>Event log</strong>:</label>
				<textarea @bind="_div2Log" class="form-control w-100" readonly></textarea>
			</div>
		</div>
	</div>

	<div class="container-fluid p-1 mb-3 border border-bottom-0 border-right-0 border-left-0">
		<h4>Injected <code>ITransitionEventsService</code> extension with no filter</h4>
		<p>
			Injected <strong>ITransitionEventsService</strong> registered event listener with @@ref DIV element which has 3 CSS <strong>Transitions</strong> for on hover: 
			<code>width 2s</code>, <code>height 0.5s</code>, <code>opacity 1s</code> properties.
			No property filter applied all transition ended events will fire in order of occurrence.
		</p>

		<div class="row pb-2">
			<div class="col-12 col-lg-8 col-xl-5">
				<div @ref="_div3" class="divTransition p-1">Hover over to start Transition</div>
				<button class="btn btn-primary mt-3" @onclick="Unsubscribe1">Unsubscribe events</button>
			</div>
		</div>

		<div class="row pb-2">
			<div class="col-12 col-lg-8 col-xl-5">
				<label><strong>Event log</strong>:</label>
				<textarea @bind="_div3Log" class="form-control w-100" readonly></textarea>
			</div>
		</div>
	</div>

	<div class="container-fluid p-1 mb-3 border border-bottom-0 border-right-0 border-left-0">
		<h4>Injected <code>ITransitionEventsService</code> extension with <code>height</code> property filter</h4>
		<p>
			Injected <strong>ITransitionEventsService</strong> registered event listener with @@ref DIV element which has 3 CSS <strong>Transitions</strong> for on hover: 
			<code>width 2s</code>, <code>height 0.5s</code>, <code>opacity 1s</code> properties.
			Property filter applied on <code>height</code> transition ended event only this will fire.
		</p>

		<div class="row pb-2">
			<div class="col-12 col-lg-8 col-xl-5">
				<div @ref="_div4" class="divTransition p-1">Hover over to start Transition</div>
				<button class="btn btn-primary mt-3" @onclick="Unsubscribe2">Unsubscribe events</button>
			</div>
		</div>

		<div class="row pb-2">
			<div class="col-12 col-lg-8 col-xl-5">
				<label><strong>Event log</strong>:</label>
				<textarea @bind="_div4Log" class="form-control w-100" readonly></textarea>
			</div>
		</div>
	</div>

	<div class="container-fluid p-1 mb-3 border border-bottom-0 border-right-0 border-left-0">
		<h4>Injected <code>ITransitionEventsService</code> extension with aggregated property filters</h4>
		<p>
			Injected <strong>ITransitionEventsService</strong> registered event listener with @@ref DIV element which has 3 CSS <strong>Transitions</strong> for on hover: 
			<code>width 2s</code>, <code>height 0.5s</code>, <code>opacity 1s</code> properties.
			Property filter applied on each registered transition ended events. Notification will fire when <strong>ALL</strong> Transition events have finished for all the HTML elemets.
		</p>

		<div class="row pb-2">
			<div class="col-12 col-lg-8 col-xl-5">
				<div @ref="_div5" class="divTransition p-1">Hover over to start Transition</div>
				<button class="btn btn-primary mt-3" @onclick="Unsubscribe3">Unsubscribe events</button>
			</div>
		</div>

		<div class="row pb-2">
			<div class="col-12 col-lg-8 col-xl-5">
				<label><strong>Event log</strong>:</label>
				<textarea @bind="_div5Log" class="form-control w-100" readonly></textarea>
			</div>
		</div>
	</div>
</div>

<div class="container-fluid p-3 mb-3 border rounded">
	<h3>CSS Animation events</h3>
	<p>
		Blazor <strong>Extension and Component wrapper</strong> to notify Blazor apps on CSS supported <strong>Animation</strong> events.
	</p>
</div>

@implements IAsyncDisposable

@inject ITransitionEventsService _transitionService1;
@inject ITransitionEventsService _transitionService2;
@inject ITransitionEventsService _transitionService3;
@code {

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await _transitionService1.RegisterTransitionEndedAsync(_div3, OnTransitionEnded3);
			await _transitionService2.RegisterTransitionEndedAsync(_div4, OnTransitionEnded4, "height");

			KeyValuePair<ElementReference, string>[] transElements = 
			{ 
				new KeyValuePair<ElementReference, string>(_div5, "opacity"),
				new KeyValuePair<ElementReference, string>(_div5, "height"),
				new KeyValuePair<ElementReference, string>(_div5, "width") 
			};
			await _transitionService3.RegisterTransitionsWhenAllEndedAsync(OnTransitionEnded5, transElements);
		}
	}
	private async Task Unsubscribe1()
	{
		await _transitionService1.RemoveTransitionEndedAsync(_div3);
	}
	private async Task Unsubscribe2()
	{
		await _transitionService2.RemoveTransitionEndedAsync(_div4, "height");
	}
	private async Task Unsubscribe3()
	{
		KeyValuePair<ElementReference, string>[] transElements = 
		{ 
			new KeyValuePair<ElementReference, string>(_div5, "opacity"),
			new KeyValuePair<ElementReference, string>(_div5, "height"),
			new KeyValuePair<ElementReference, string>(_div5, "width") 
		};
		await _transitionService3.RemoveTransitionsWhenAllEndedAsync(transElements);
	}

	private string _div1Log;
	private void OnTransitionEnded1(TransitionEndEventArgs e)
	{
		_div1Log = WriteLog(_div1Log, e);
	}
	private string _div2Log;
	private void OnTransitionEnded2(TransitionEndEventArgs e)
	{
		_div2Log = WriteLog(_div2Log, e);
	}

	private ElementReference _div3;
	private string _div3Log;
	private async Task OnTransitionEnded3(TransitionEndEventArgs e)
	{
		_div3Log = WriteLog(_div3Log, e);
		StateHasChanged();
	}

	private ElementReference _div4;
	private string _div4Log;
	private async Task OnTransitionEnded4(TransitionEndEventArgs e)
	{
		_div4Log = WriteLog(_div4Log, e);
		StateHasChanged();
	}

	private ElementReference _div5;
	private string _div5Log;
	private async Task OnTransitionEnded5(TransitionEndEventArgs[] args)
	{
		var time = DateTime.Now.TimeOfDay;
		_div5Log += $"{time}: Aggregated Transitions ended: total number of events: '{args.Length}'.  \r\n";

		foreach(var item in args)
		{
			_div5Log = WriteLog(_div5Log, item, time);
		}
		StateHasChanged();
	}

	private string WriteLog(string log, TransitionEndEventArgs e, TimeSpan? eventTime = null)
	{
		return log 
			+= $"{eventTime ?? DateTime.Now.TimeOfDay}: Transition ended filter: '{e.OriginalPropertyNameFilter}', Type: '{e.Type}', PropertyName: '{e.PropertyName}', ElapsedTime: '{e.ElapsedTime}', ReturnValue '{e.ReturnValue}'. \r\n";
	}

	public async ValueTask DisposeAsync()
	{
		if(_transitionService1 is not null)
		{
			await _transitionService1.DisposeAsync();
		}
		if(_transitionService2 is not null)
		{
			await _transitionService2.DisposeAsync();
		}
		if(_transitionService3 is not null)
		{
			await _transitionService3.DisposeAsync();
		}
	}
}