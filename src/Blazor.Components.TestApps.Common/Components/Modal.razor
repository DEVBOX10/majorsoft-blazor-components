<h1>Modal Component</h1>
<p>
	Blazor component that can be used to render Modal dialog window with customizable content and parameterized Overlay, etc.. For usege see soruce code and docs on 
	<a href="https://github.com/majorimi/blazor-components/blob/master/.github/docs/Modal.md" target="_blank">Github</a>.
</p>

<div class="container-fluid p-3 mb-3 border rounded">
	<h3>Modal dialog</h3>
	<p>Renders and Overlay layer with customizable content for showing dialog...</p>

	<div class="row pb-2">
		<div class="col-12 col-lg-8 col-xl-5">
			Overlay color (Name, RGB, Hex, HSL): <input class="form-control w-100" @bind="_overlayColor" />
		</div>
	</div>
	<div class="row pb-2">
		<div class="col-12 col-lg-8 col-xl-5">
			Overlay opacity: @(_overlayOpacity/1000) 
			<input type="range" class="w-100" min="0" max="1000" @bind="_overlayOpacity" @oninput="(e => _overlayOpacity = int.Parse(e.Value?.ToString()))" />
		</div>
	</div>
	<div class="row pb-2">
		<div class="col-12 col-lg-8 col-xl-5">
			Modal height (0 is auto): @(_modalHeight == 0 ? "auto" : $"{_modalHeight}px")
			<input type="range" class="w-100" min="0" max="1000" @bind="_modalHeight" @oninput="(e => _modalHeight = int.Parse(e.Value?.ToString()))" />
		</div>
	</div>
	<div class="row pb-2">
		<div class="col-12 col-lg-8 col-xl-5">
			Modal width (0 is auto): @(_modalWitdth == 0 ? "auto" : $"{_modalWitdth}px")
			<input type="range" class="w-100" min="0" max="1000" @bind="_modalWitdth" @oninput="(e => _modalWitdth = int.Parse(e.Value?.ToString()))" />
		</div>
	</div>
	<div class="row pb-2">
		<div class="col-12 col-lg-8 col-xl-5">
			Modal Max. height: @(_modalMaxHeight)px
			<input type="range" class="w-100" min="200" max="1000" @bind="_modalMaxHeight" @oninput="(e => _modalMaxHeight = int.Parse(e.Value?.ToString()))" />
		</div>
	</div>
	<div class="row pb-2">
		<div class="col-12 col-lg-8 col-xl-5">
			Modal Max. width: @(_modalMaxWitdth)px
			<input type="range" class="w-100" min="200" max="1000" @bind="_modalMaxWitdth" @oninput="(e => _modalMaxWitdth = int.Parse(e.Value?.ToString()))" />
		</div>
	</div>

	<div class="row pb-2">
		<div class="col-12 col-lg-8 col-xl-5">
			Close on Overlay click: <input class="mr-3" type="checkbox" @bind="_modalCloseOnClick"/>
			Close on Escape key: <input class="mr-3" type="checkbox" @bind="_modalCloseOnEsc"/>
			Show Close button: <input class="mr-3" type="checkbox" @bind="_modalShowClose"/>
			<br />
			Animate: <input class="mr-3" type="checkbox" @bind="_modalAnimate"/>
			Focus: <input class="mr-3" type="checkbox" @bind="_modalFocus"/>
			Centered: <input class="mr-3" type="checkbox" @bind="_modalCentered"/>
		</div>
	</div>

	<ModalDialog @ref="_dialog" 
		OverlayBackgroundColor="@_overlayColor" 
		OverlayOpacity="@(_overlayOpacity/1000)"
		Height="@_modalHeight"
		Width="@_modalWitdth"
		MaxHeight="@_modalMaxHeight"
		MaxWidth="@_modalMaxWitdth"
		CloseOnOverlayClick="_modalCloseOnClick"
		CloseOnEscapeKey="_modalCloseOnEsc"
		Focus="_modalFocus"
		Animate="_modalAnimate"
		Centered="_modalCentered"
		ShowCloseButton="_modalShowClose"
		OnOpen="OnOpen"
		OnClose="OnClose"
		OnCloseButtonClicked="OnCloseButtonClicked"
		OnOverlayClicked="OnOverlayClicked"
		OnEscapeKeyPress="OnEscapeKeyPress"
		OnTransitionEnded="OnTransitionEnded">
		<Header>
			<h4>Modal title</h4>
		</Header>
		<Content>
			<div class="container">
				<div class="row pb-2">
					Congratulations to your first modal!!!
				</div>
				<div class="row pb-2">
					Enter your name: <input class="form-control w-100" @bind="_yourName" />
				</div>
			</div>
		</Content>
		<Footer>
			<button class="btn btn-warning ml-2" @onclick="CancelDialog">Cancel</button>
			<button class="btn btn-primary ml-2" @onclick="AcceptDialog">Ok</button>
		</Footer>
	</ModalDialog>

	<div class="row pb-2">
		<div class="col-12 col-lg-8 col-xl-5">
			<button id="_modalPrompt" class="btn btn-primary mb-2" @onclick="OpenDialog">Prompt dialog</button>
			<label class="form-control">Hello: @(_yourName)</label>
		</div>
	</div>
	
	<div class="row pb-2">
		<div class="col-12">
			<label><strong>Event log</strong>:</label>
			<textarea @bind="_modal1Log" style="height:200px;" class="form-control w-100" readonly></textarea>
		</div>
	</div>

</div>

@code {
	private string _overlayColor = "128,128,128";
	private double _overlayOpacity = 500;
	private double _modalHeight = 300;
	private double _modalWitdth = 500;
	private double _modalMaxHeight = 800;
	private double _modalMaxWitdth = 800;
	private bool _modalAnimate = true;
	private bool _modalCloseOnClick = true;
	private bool _modalCloseOnEsc = true;
	private bool _modalFocus = true;
	private bool _modalCentered = true;
	private bool _modalShowClose = true;

	private string _modal1Log;
	private string _yourName;
	private ModalDialog _dialog;
	private async Task OpenDialog()
	{
		await _dialog.Open();
	}
	private async Task AcceptDialog()
	{
		if(_dialog.IsOpen)
		{
			await _dialog.Close();

			if(!string.IsNullOrWhiteSpace(_yourName))
				_yourName += "!";
		}
	}
	private async Task CancelDialog()
	{
		await _dialog.Close();
	}

	//Dialog events
	public async Task OnOpen()
	{
		_modal1Log = WriteLog(_modal1Log, "");
		await Task.Delay(500);
	}
	public async Task OnClose()
	{
		_modal1Log = WriteLog(_modal1Log, "");
		await Task.Delay(500);
	}
	private async Task OnCloseButtonClicked(MouseEventArgs e)
	{
		_modal1Log = WriteLog(_modal1Log, "");
	}
	private async Task OnOverlayClicked(MouseEventArgs e)
	{
		_modal1Log = WriteLog(_modal1Log, "");
	}
	private async Task OnEscapeKeyPress(KeyboardEventArgs e)
	{
		_modal1Log = WriteLog(_modal1Log, "");
	}
	private async Task OnTransitionEnded(TransitionEndEventArgs[] e)
	{
		_modal1Log = WriteLog(_modal1Log, "");
	}

	private string WriteLog(string log, string message)
	{
		return log += $"{DateTime.Now.TimeOfDay}: Modal dialog: '{message}'. \r\n";
	}
}