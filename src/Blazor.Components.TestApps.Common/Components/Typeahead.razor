<h1>Typeahead Input controls</h1>
<p>
	Blazor component that renders an Input, InputText,. For usege see soruce code and docs on
	<a href="https://github.com/majorimi/blazor-components/blob/master/.github/docs/Typeahead.md" target="_blank">Github</a>.
	<br /><strong>Majorsoft.Blazor.Components.Typeahead</strong> package is available on <a href="https://www.nuget.org/packages/Majorsoft.Blazor.Components.Typeahead" target="_blank">Nuget</a>
</p>

<div class="container-fluid p-3 mb-3 border rounded">
	<h3>Typeahead (pre-loaded) data with <code>@("IEnumerable<string>") Data</code></h3>
	<p>
		Wraps around <strong>HTML Input</strong> control and adds Typeahead control with potentional debounce (delay) and minimal required chars.
		This example uses sync (pre-loaded) data as <code>@("IEnumerable<string>")</code> passed into <code>Data</code> property. 
		Typeahead will use default case insesitive string contains search. Since search algorithm is well known results matched strings will be highlighted.
	</p>

	<div class="row pb-2">
		<div class="col-12 col-lg-8 col-xl-5">
			Debounce time: @_debounceMilisec ms.
			<input class="w-100" type="range" min="0" max="2000" @bind="_debounceMilisec" @oninput="(e => _debounceMilisec = int.Parse(e.Value?.ToString()))" />
		</div>
	</div>
	<div class="row pb-2">
		<div class="col-12 col-lg-8 col-xl-5">
			Min required chars: @_minCharsLength
			<input class="w-100" type="range" min="0" max="10" @bind="_minCharsLength" @oninput="(e => _minCharsLength = int.Parse(e.Value?.ToString()))" />
		</div>
	</div>
	<div class="row pb-2">
		<div class="col-12 col-lg-8 col-xl-5">
			Typeahead dropdown height (0 is auto): @(_dropdownHeight == 0 ? "auto" : $"{_dropdownHeight}px")
			<input type="range" class="w-100" min="0" max="300" @bind="_dropdownHeight" @oninput="(e => _dropdownHeight = int.Parse(e.Value?.ToString()))" />
		</div>
	</div>
	<div class="row pb-2">
		<div class="col-12 col-lg-8 col-xl-5">
			Typeahead dropdown width (0 is auto): @(_dropdownWitdth == 0 ? "auto" : $"{_dropdownWitdth}px")
			<input type="range" class="w-100" min="0" max="1000" @bind="_dropdownWitdth" @oninput="(e => _dropdownWitdth = int.Parse(e.Value?.ToString()))" />
		</div>
	</div>
	<div class="row pb-2">
		<div class="col-12 col-lg-8 col-xl-5">
			Select active item on blur: <input class="mr-3" type="checkbox" @bind="_selectOnBlur"/>
			<br/>
			Show all Data on empty input (<strong>DOES NOT work only with async DataSource</strong>): <input class="mr-3" type="checkbox" @bind="_showAllOnEmptyInput"/>
		</div>
	</div>

	<div class="row pb-2">
		<div class="col-12 col-lg-8 col-xl-5">
			Model: "<strong>@(_selectedItem ?? _typeaheadInputValue)</strong>"
		</div>
	</div>
	
	<div class="row pb-2">
		<div class="col-12 col-lg-8 col-xl-5">
		@*DataSource="query => Search(query)"*@
			<TypeaheadInput id="in1" class="form-control w-100" placeholder="@("Please type in at least: " + _minCharsLength + " char(s)")"
							@ref="_input"
							Data="_testData.Select(x => x.Name)"
							@bind-Value="@_typeaheadInputValue"
							OnInput="@(text => {_selectedItem = null; _typeaheadInputValue = text;})"
							TItem="string"
							OnSelectedItemChanged="@(text => _selectedItem = text)"
							SelectOnBlur="_selectOnBlur"
							ShowAllOnEmptyInput="_showAllOnEmptyInput"
							DebounceTime="@_debounceMilisec"
							MinLength="@_minCharsLength" >
				<NoResultContent>
					<i class="fa fa-remove"></i> No Results Found
				</NoResultContent>
				<InProgressContent>
					<i class="fa fa-lg fa-ellipsis-h @*fa-pulse*@"></i> Searching...
				</InProgressContent>
			</TypeaheadInput>
		</div>
	</div>
</div>

<div class="container-fluid p-3 mb-3 border rounded">
	<h3>Typeahead  (pre-loaded) data with <code>@("IEnumerable<StatesWithFlags>") Data</code></h3>
	<p>
		Wraps around <strong>HTML Input</strong> control and adds Typeahead control with potentional debounce (delay) and minimal required chars.
		This example uses sync (pre-loaded) data as <code>@("IEnumerable<StatesWithFlags>")</code> passed into <code>Data</code> property. 
		Typeahead will use default case insesitive string contains search. Since search algorithm is well known results matched strings will be highlighted.
	</p>

	<div class="row pb-2">
		<div class="col-12 col-lg-8 col-xl-5">
			<input type="range" min="0" max="2000" @bind="_debounceMilisec2" @oninput="(e => _debounceMilisec2 = int.Parse(e.Value?.ToString()))" /> <pre style="display: inline;">Debounce time: @_debounceMilisec2 ms.</pre>
		</div>
	</div>
	<div class="row pb-2">
		<div class="col-12 col-lg-8 col-xl-5">
			<input type="range" min="0" max="10" @bind="_minCharsLength2" @oninput="(e => _minCharsLength2 = int.Parse(e.Value?.ToString()))" /> <pre style="display: inline;">Min required chars: @_minCharsLength2</pre>
		</div>
	</div>

	<div class="row pb-2">
		<div class="col-12 col-lg-8 col-xl-5">
			Select active item on blur: <input class="mr-3" type="checkbox" @bind="_selectOnBlur2"/>
			<br/>
			Show all Data on empty input (<strong>DOES NOT work only with async DataSource</strong>): <input class="mr-3" type="checkbox" @bind="_showAllOnEmptyInput2"/>
		</div>
	</div>

	<div class="row pb-2">
		<div class="col-12 col-lg-8 col-xl-5">
			Model: "<strong>@(_selectedItem2 != null ? JsonSerializer.Serialize(_selectedItem2) : _typeaheadInputValue2)</strong>"
		</div>
	</div>
	
	<div class="row pb-2">
		<div class="col-12 col-lg-8 col-xl-5">
			<TypeaheadInput id="in1" class="form-control w-100" placeholder="@("Please type in at least: " + _minCharsLength2 + " char(s)")"
							@ref="_input2"
							Data="_testData"
							LabelPropertySelector="x => x.Name"
							@bind-Value="@_typeaheadInputValue2"
							OnInput="@(text => {_selectedItem2 = null; _typeaheadInputValue2 = text;})"
							TItem="StatesWithFlags"
							OnSelectedItemChanged="@(data => _selectedItem2 = data)"
							SelectOnBlur="_selectOnBlur2"
							ShowAllOnEmptyInput="_showAllOnEmptyInput2"
							DebounceTime="@_debounceMilisec2"
							MinLength="@_minCharsLength2" >
				<NoResultContent>
					<i class="fa fa-remove"></i> No Results Found
				</NoResultContent>
				<InProgressContent>
					<i class="fa fa-lg fa-ellipsis-h @*fa-pulse*@"></i> Searching...
				</InProgressContent>
			</TypeaheadInput>
		</div>
	</div>
</div>

@using System.Linq
@using System.Text.Json

@code {
	private StatesWithFlags[] _testData = null;
	protected override void OnInitialized()
	{
		_testData = JsonSerializer.Deserialize<StatesWithFlags[]>(jsonData);
	}
	
	//TypeaheadInput
	private string _typeaheadInputValue = "";
	private string _selectedItem;
	private int _debounceMilisec = 0;
	private int _minCharsLength = 0;
	private int _dropdownHeight = 150;
	private int _dropdownWitdth = 0;
	private bool _selectOnBlur = true;
	private bool _showAllOnEmptyInput = true;
	private TypeaheadInput<string> _input;

	//TypeaheadInput
	private string _typeaheadInputValue2 = "";
	private StatesWithFlags _selectedItem2;
	private int _debounceMilisec2 = 0;
	private int _minCharsLength2 = 0;
	private bool _selectOnBlur2 = true;
	private bool _showAllOnEmptyInput2 = true;
	private TypeaheadInput<StatesWithFlags> _input2;

	private async Task<IEnumerable<string>> Search(string query)
	{
		return _testData.Select(s => s.Name).Where(x => x.ToLower().Contains(query.ToLower()));
	}
	private async Task<IEnumerable<StatesWithFlags>> Search2(string query)
	{
		return _testData.Where(x => x?.Name?.ToLower().Contains(query.ToLower()) ?? false);
	}

	private class StatesWithFlags
	{
		public string Name { get; set; }
		public string Flag { get; set; }
	}
	private string jsonData = "[{\"Name\":\"Alabama\",\"Flag\":\"5/5c/Flag_of_Alabama.svg/45px-Flag_of_Alabama.svg.png\"},{\"Name\":\"Alaska\",\"Flag\":\"e/e6/Flag_of_Alaska.svg/43px-Flag_of_Alaska.svg.png\"},{\"Name\":\"Arizona\",\"Flag\":\"9/9d/Flag_of_Arizona.svg/45px-Flag_of_Arizona.svg.png\"},{\"Name\":\"Arkansas\",\"Flag\":\"9/9d/Flag_of_Arkansas.svg/45px-Flag_of_Arkansas.svg.png\"},{\"Name\":\"California\",\"Flag\":\"0/01/Flag_of_California.svg/45px-Flag_of_California.svg.png\"},{\"Name\":\"Colorado\",\"Flag\":\"4/46/Flag_of_Colorado.svg/45px-Flag_of_Colorado.svg.png\"},{\"Name\":\"Connecticut\",\"Flag\":\"9/96/Flag_of_Connecticut.svg/39px-Flag_of_Connecticut.svg.png\"},{\"Name\":\"Delaware\",\"Flag\":\"c/c6/Flag_of_Delaware.svg/45px-Flag_of_Delaware.svg.png\"},{\"Name\":\"Florida\",\"Flag\":\"f/f7/Flag_of_Florida.svg/45px-Flag_of_Florida.svg.png\"},{\"Name\":\"Georgia\",\"Flag\":\"5/54/Flag_of_Georgia_%28U.S._state%29.svg/46px-Flag_of_Georgia_%28U.S._state%29.svg.png\"},{\"Name\":\"Hawaii\",\"Flag\":\"e/ef/Flag_of_Hawaii.svg/46px-Flag_of_Hawaii.svg.png\"},{\"Name\":\"Idaho\",\"Flag\":\"a/a4/Flag_of_Idaho.svg/38px-Flag_of_Idaho.svg.png\"},{\"Name\":\"Illinois\",\"Flag\":\"0/01/Flag_of_Illinois.svg/46px-Flag_of_Illinois.svg.png\"},{\"Name\":\"Indiana\",\"Flag\":\"a/ac/Flag_of_Indiana.svg/45px-Flag_of_Indiana.svg.png\"},{\"Name\":\"Iowa\",\"Flag\":\"a/aa/Flag_of_Iowa.svg/44px-Flag_of_Iowa.svg.png\"},{\"Name\":\"Kansas\",\"Flag\":\"d/da/Flag_of_Kansas.svg/46px-Flag_of_Kansas.svg.png\"},{\"Name\":\"Kentucky\",\"Flag\":\"8/8d/Flag_of_Kentucky.svg/46px-Flag_of_Kentucky.svg.png\"},{\"Name\":\"Louisiana\",\"Flag\":\"e/e0/Flag_of_Louisiana.svg/46px-Flag_of_Louisiana.svg.png\"},{\"Name\":\"Maine\",\"Flag\":\"3/35/Flag_of_Maine.svg/45px-Flag_of_Maine.svg.png\"},{\"Name\":\"Maryland\",\"Flag\":\"a/a0/Flag_of_Maryland.svg/45px-Flag_of_Maryland.svg.png\"},{\"Name\":\"Massachusetts\",\"Flag\":\"f/f2/Flag_of_Massachusetts.svg/46px-Flag_of_Massachusetts.svg.png\"},{\"Name\":\"Michigan\",\"Flag\":\"b/b5/Flag_of_Michigan.svg/45px-Flag_of_Michigan.svg.png\"},{\"Name\":\"Minnesota\",\"Flag\":\"b/b9/Flag_of_Minnesota.svg/46px-Flag_of_Minnesota.svg.png\"},{\"Name\":\"Mississippi\",\"Flag\":\"4/42/Flag_of_Mississippi.svg/45px-Flag_of_Mississippi.svg.png\"},{\"Name\":\"Missouri\",\"Flag\":\"5/5a/Flag_of_Missouri.svg/46px-Flag_of_Missouri.svg.png\"},{\"Name\":\"Montana\",\"Flag\":\"c/cb/Flag_of_Montana.svg/45px-Flag_of_Montana.svg.png\"},{\"Name\":\"Nebraska\",\"Flag\":\"4/4d/Flag_of_Nebraska.svg/46px-Flag_of_Nebraska.svg.png\"},{\"Name\":\"Nevada\",\"Flag\":\"f/f1/Flag_of_Nevada.svg/45px-Flag_of_Nevada.svg.png\"},{\"Name\":\"New Hampshire\",\"Flag\":\"2/28/Flag_of_New_Hampshire.svg/45px-Flag_of_New_Hampshire.svg.png\"},{\"Name\":\"New Jersey\",\"Flag\":\"9/92/Flag_of_New_Jersey.svg/45px-Flag_of_New_Jersey.svg.png\"},{\"Name\":\"New Mexico\",\"Flag\":\"c/c3/Flag_of_New_Mexico.svg/45px-Flag_of_New_Mexico.svg.png\"},{\"Name\":\"New York\",\"Flag\":\"1/1a/Flag_of_New_York.svg/46px-Flag_of_New_York.svg.png\"},{\"Name\":\"North Carolina\",\"Flag\":\"b/bb/Flag_of_North_Carolina.svg/45px-Flag_of_North_Carolina.svg.png\"},{\"Name\":\"North Dakota\",\"Flag\":\"e/ee/Flag_of_North_Dakota.svg/38px-Flag_of_North_Dakota.svg.png\"},{\"Name\":\"Ohio\",\"Flag\":\"4/4c/Flag_of_Ohio.svg/46px-Flag_of_Ohio.svg.png\"},{\"Name\":\"Oklahoma\",\"Flag\":\"6/6e/Flag_of_Oklahoma.svg/45px-Flag_of_Oklahoma.svg.png\"},{\"Name\":\"Oregon\",\"Flag\":\"b/b9/Flag_of_Oregon.svg/46px-Flag_of_Oregon.svg.png\"},{\"Name\":\"Pennsylvania\",\"Flag\":\"f/f7/Flag_of_Pennsylvania.svg/45px-Flag_of_Pennsylvania.svg.png\"},{\"Name\":\"Rhode Island\",\"Flag\":\"f/f3/Flag_of_Rhode_Island.svg/32px-Flag_of_Rhode_Island.svg.png\"},{\"Name\":\"South Carolina\",\"Flag\":\"6/69/Flag_of_South_Carolina.svg/45px-Flag_of_South_Carolina.svg.png\"},{\"Name\":\"South Dakota\",\"Flag\":\"1/1a/Flag_of_South_Dakota.svg/46px-Flag_of_South_Dakota.svg.png\"},{\"Name\":\"Tennessee\",\"Flag\":\"9/9e/Flag_of_Tennessee.svg/46px-Flag_of_Tennessee.svg.png\"},{\"Name\":\"Texas\",\"Flag\":\"f/f7/Flag_of_Texas.svg/45px-Flag_of_Texas.svg.png\"},{\"Name\":\"Utah\",\"Flag\":\"f/f6/Flag_of_Utah.svg/45px-Flag_of_Utah.svg.png\"},{\"Name\":\"Vermont\",\"Flag\":\"4/49/Flag_of_Vermont.svg/46px-Flag_of_Vermont.svg.png\"},{\"Name\":\"Virginia\",\"Flag\":\"4/47/Flag_of_Virginia.svg/44px-Flag_of_Virginia.svg.png\"},{\"Name\":\"Washington\",\"Flag\":\"5/54/Flag_of_Washington.svg/46px-Flag_of_Washington.svg.png\"},{\"Name\":\"West Virginia\",\"Flag\":\"2/22/Flag_of_West_Virginia.svg/46px-Flag_of_West_Virginia.svg.png\"},{\"Name\":\"Wisconsin\",\"Flag\":\"2/22/Flag_of_Wisconsin.svg/45px-Flag_of_Wisconsin.svg.png\"},{\"Name\":\"Wyoming\",\"Flag\":\"b/bc/Flag_of_Wyoming.svg/43px-Flag_of_Wyoming.svg.png\"}]";
}
