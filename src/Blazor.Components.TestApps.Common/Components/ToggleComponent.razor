<h1>Toggler Components</h1>
<p>
	Blazor component that renders customizable Toggle switch and Toggle button components. For usege see soruce code and docs on 
	<a href="https://github.com/majorimi/blazor-components/blob/master/.github/docs/Toggle.md" target="_blank">Github</a>.
	<br /><strong>Majorsoft.Blazor.Components.Toggle</strong> package is available on <a href="https://www.nuget.org/packages/Majorsoft.Blazor.Components.Toggle" target="_blank">Nuget</a>
</p>

<div class="container-fluid p-3 mb-3 border rounded">
	<h3>Toggle switch</h3>
	<p>Renders <strong>HTML input</strong> styled as Toggle switch with customizable size and color, etc.</p>

	<div class="row pb-2">
		<div class="col-12 col-lg-8 col-xl-5">
			On color (Name, RGB, Hex, HSL): <input class="form-control w-100" @bind="_onColor" />
		</div>
	</div>
	<div class="row pb-2">
		<div class="col-12 col-lg-8 col-xl-5">
			Off color (Name, RGB, Hex, HSL): <input class="form-control w-100" @bind="_offColor" />
		</div>
	</div>
	<div class="row pb-2">
		<div class="col-12 col-lg-8 col-xl-5">
			Widht: @(_widht)px
			<input type="range" class="w-100" min="30" max="100" @bind="_widht" @oninput="(e => _widht = int.Parse(e.Value?.ToString()))" />
		</div>
	</div>
	<div class="row pb-2">
		<div class="col-12 col-lg-8 col-xl-5">
			Height: @(_height)px
			<input type="range" class="w-100" min="15" max="50" @bind="_height" @oninput="(e => _height = int.Parse(e.Value?.ToString()))" />
		</div>
	</div>

	<div class="row pb-2">
		<div class="col-12 col-lg-8 col-xl-5">
			Disabled: <input class="mr-3" type="checkbox" @bind="_disabled"/>
			Value: <input class="mr-3" type="checkbox" @bind="_value"/>
		</div>
	</div>

	<div class="row pb-4">
		<div class="col-12 col-lg-8 col-xl-5">
			Toggle switch Style: <select class="form-control selectpicker w-100" @bind="_styleType">
				@foreach (var item in Enum.GetValues(typeof(ToggleSwitchStyle)))
				{
					<option value="@item">@item</option>
				}
			</select>
		</div>
	</div>

	<div class="row pb-2">
		<div class="col-12">
			<ToggleSwitch
				@ref="_toggleSwitch"
				Value="_value"
				OnColor="@_onColor"
				OffColor="@_offColor"
				Width="_widht"
				Height="_height"
				HandleStyle="_styleType"
				Disabled="_disabled"
				OnValueChanged="OnToggleSwitched">
			</ToggleSwitch>
		</div>
	</div>

	<div class="row pb-2">
		<div class="col-12">
			<label><strong>Event log</strong>:</label>
			<textarea @ref="log1" @bind="_swithch1Log" style="height:200px;" class="form-control w-100" readonly></textarea>
		</div>
	</div>
</div>

<div class="container-fluid p-3 mb-3 border rounded">
</div>

@code {
	private ToggleSwitch _toggleSwitch;
	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await _toggleSwitch.InnerElementReference.FocusAsync();
		}
	}

	private string _onColor = "DodgerBlue";
	private string _offColor = "DarkGray";
	private int _widht = 50;
	private int _height = 22;
	private bool _value = true;
	private bool _disabled = false;
	private ToggleSwitchStyle _styleType = ToggleSwitchStyle.Circle;

	private ElementReference log1;
	private string _swithch1Log;

	private async Task OnToggleSwitched(bool val)
	{
		_value = val;
		_swithch1Log = WriteLog(_swithch1Log, $"Toggle Switched event current value: {val}");
	}


	private string WriteLog(string log, string message)
	{
		log += $"{DateTime.Now.TimeOfDay}: {message}. \r\n";
		log1.ScrollToEndAsync();

		return log;
	}
}