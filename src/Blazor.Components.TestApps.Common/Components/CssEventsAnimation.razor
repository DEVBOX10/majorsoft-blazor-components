
<div class="container-fluid p-3 mb-3 border rounded">
	<h3>CSS Animation events</h3>
	<p>
		Blazor <strong>Extension and Component wrapper</strong> to notify Blazor apps on CSS supported <strong>Animation</strong> events: <code>animationstart</code>, <code>animationiteration</code>, <code>animationend</code>.
		This is useful when you want to wait for a CSS Animations to finish/restart, etc. and then continue run C# code, e.g.: hide the element, etc. 
		<ul>
			<li><code>AnimationElement</code>: Convinient Blazor component which uses IAnimationEventsService to wrap around the given Content can listen for all or one animation Name.</li>
			<li><code>IAnimationEventsService</code>: Low level injectable service which has more features can aggregate events but must be DisposeAsync() manually.</li>
		</ul>
	</p>
</div>

@implements IAsyncDisposable

@inject IAnimationEventsService _animationService;
@code {

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{

		}
	}


	private string WriteLog(string log, AnimationEventArgs e, TimeSpan? eventTime = null)
	{
		return log 
			+= $"{eventTime ?? DateTime.Now.TimeOfDay}: Animation event Name filter: '{e.OriginalAnimationNameFilter}', Type: '{e.Type}', AnimationName: '{e.AnimationName}', ElapsedTime: '{e.ElapsedTime}', ReturnValue '{e.ReturnValue}'. \r\n";
	}

	public async ValueTask DisposeAsync()
	{
		if(_animationService is not null)
		{
			await _animationService.DisposeAsync();
		}
	}
}