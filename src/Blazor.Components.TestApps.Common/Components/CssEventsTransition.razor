<style>
	.divTransition {
		width: 160px;
		height: 100px;
		opacity: 1;
		background: red;
		-webkit-transition: width 2s, height 0.5s, opacity 1s; /* For Safari 3.1 to 6.0 */
		transition: width 2s, height 0.5s, opacity 1s;
	}

	.divTransition:hover {
		width: 400px;
		height: 150px;
		opacity: 0.7;
	}

	.lbTransition {
		width: 100%;
		height: 100%;
		font-size: 16px;
		font-weight: bold;
		-webkit-transition: font-size 1.25s; /* For Safari 3.1 to 6.0 */
		transition: font-size 1.25s;
	}
	.lbTransition:hover {
		font-size: 24px;
	}

	textarea {
		height: 150px !important;
	}
</style>

<div class="container-fluid p-3 mb-3 border rounded">
	<h3>CSS Transition event</h3>
	<p>
		Blazor <strong>Extension and Component wrapper</strong> to notify Blazor apps on CSS supported <strong>Transition</strong> event: <code>transitionend</code>.
		This is useful when you want to wait for a CSS Transition to finish and then continue run C# code, e.g.: hide the element, etc. 
		<ul>
			<li><code>TransitionElement</code>: Convinient Blazor component which uses <code>ITransitionEventsService</code> to wrap around the given Content and listens for all or one event property.</li>
			<li><code>ITransitionEventsService</code>: Low level injectable service which has more features e.g. can aggregate multiple events from multiple HTML elements but must be DisposeAsync() manually.</li>
		</ul>
	</p>

	<div class="container-fluid p-1 mb-3 border border-bottom-0 border-right-0 border-left-0">
		<h4><code>TransitionElement</code> component with no filter</h4>
		<p>
			<strong>TransitionElement</strong> wraps around standard HTML elements: DIV which has 3 and LABEL with one CSS <strong>Transitions</strong> for on hover: 
			DIV <code>width 2s</code>, <code>height 0.5s</code>, <code>opacity 1s</code> and LABEL <code>font-size 1.25s</code> properties.
			<br />No property filter applied all <code>transitionend</code> events will fire and bubble up to <strong>TransitionElement</strong> in order of occurrence.
		</p>

		<div class="row pb-2">
			<div class="col-1">
				<TransitionElement OnTransitionEnded="OnTransitionEnded1">
					<Content>
						<div id="divTransition1" class="divTransition">
							<label id="lbTransition1" class="lbTransition m-1">Hover over to start Transition</label>
						</div>
					</Content>
				</TransitionElement>
			</div>
		</div>

		<div class="row pb-2">
			<div class="col-12">
				<label><strong>Event log</strong>:</label>
				<textarea @bind="_div1Log" class="form-control w-100" readonly></textarea>
			</div>
		</div>
	</div>

	<div class="container-fluid p-1 mb-3 border border-bottom-0 border-right-0 border-left-0">
		<h4><code>TransitionElement</code> component with <code>opacity</code> property filter</h4>
		<p>
			<strong>TransitionElement</strong> wraps around standard HTML elements: DIV which has 3 and LABEL with one CSS <strong>Transitions</strong> for on hover: 
			DIV <code>width 2s</code>, <code>height 0.5s</code>, <code>opacity 1s</code> and LABEL <code>font-size 1.25s</code> properties.
			<br />Property filter applied on <code>opacity</code> property <code>transitionend</code> event will fire only for this property.
		</p>

		<div class="row pb-2">
			<div class="col-1">
				<TransitionElement TransitionPropertyName="opacity" OnTransitionEnded="OnTransitionEnded2">
					<Content>
						<div id="divTransition2" class="divTransition">
							<label id="lbTransition2" class="lbTransition m-1">Hover over to start Transition</label>
						</div>
					</Content>
				</TransitionElement>
			</div>
		</div>

		<div class="row pb-2">
			<div class="col-12">
				<label><strong>Event log</strong>:</label>
				<textarea @bind="_div2Log" class="form-control w-100" readonly></textarea>
			</div>
		</div>
	</div>

	<div class="container-fluid p-1 mb-3 border border-bottom-0 border-right-0 border-left-0">
		<h4>Injected <code>ITransitionEventsService</code> extension with no filter</h4>
		<p>
			Injected <strong>ITransitionEventsService</strong> registered event listener with @@ref DIV element which has 3 and LABEL with one CSS <strong>Transitions</strong> for on hover:
			DIV <code>width 2s</code>, <code>height 0.5s</code>, <code>opacity 1s</code> and LABEL <code>font-size 1.25s</code> properties.
			<br />No property filter applied all <code>transitionend</code> events will fire and bubble up to <strong>outer DIV</strong> in order of occurrence.
		</p>

		<div class="row pb-2">
			<div class="col-2">
				<div id="divTransition3" @ref="_div3" class="divTransition">
					<label id="lbTransition3" class="lbTransition m-1">Hover over to start Transition</label>
				</div>
				<button class="btn btn-primary mt-3" @onclick="HandleEvent1">@_eventsText1</button>
			</div>
		</div>

		<div class="row pb-2">
			<div class="col-12">
				<label><strong>Event log</strong>:</label>
				<textarea @bind="_div3Log" class="form-control w-100" readonly></textarea>
			</div>
		</div>
	</div>

	<div class="container-fluid p-1 mb-3 border border-bottom-0 border-right-0 border-left-0">
		<h4>Injected <code>ITransitionEventsService</code> extension with <code>height</code> property filter</h4>
		<p>
			Injected <strong>ITransitionEventsService</strong> registered event listener with @@ref DIV element which has 3 and LABEL with one CSS <strong>Transitions</strong> for on hover:
			DIV <code>width 2s</code>, <code>height 0.5s</code>, <code>opacity 1s</code> and LABEL <code>font-size 1.25s</code> properties.
			<br /> Property filter applied on <code>height</code> property <code>transitionend</code> event will fire only for this property.
		</p>

		<div class="row pb-2">
			<div class="col-2">
				<div id="divTransition4" @ref="_div4" class="divTransition">
					<label id="lbTransition4" class="lbTransition m-1">Hover over to start Transition</label>
				</div>
				<button class="btn btn-primary mt-3" @onclick="HandleEvent2">@_eventsText2</button>
			</div>
		</div>

		<div class="row pb-2">
			<div class="col-12">
				<label><strong>Event log</strong>:</label>
				<textarea @bind="_div4Log" class="form-control w-100" readonly></textarea>
			</div>
		</div>
	</div>

	<div class="container-fluid p-1 mb-3 border border-bottom-0 border-right-0 border-left-0">
		<h4>Injected <code>ITransitionEventsService</code> extension with aggregated property filters</h4>
		<p>
			Injected <strong>ITransitionEventsService</strong> registered event listener with @@ref DIV element which has 3 and LABEL with one CSS <strong>Transitions</strong> for on hover:
			DIV <code>width 2s</code>, <code>height 0.5s</code>, <code>opacity 1s</code> and LABEL <code>font-size 1.25s</code> properties.
			<br /> Property filter applied on each registered <code>transitionend</code> events. Notification will fire when <strong>ALL</strong> Transition events have finished for all the HTML elemets.
		</p>

		<div class="row pb-2">
			<div class="col-2">
				<div id="divTransition5" @ref="_div5" class="divTransition">
					<label id="lbTransition5" @ref="_label5" class="lbTransition m-1">Hover over to start Transition</label>
				</div>
				<button class="btn btn-primary mt-3" @onclick="HandleEvent3">@_eventsText3</button>
			</div>
		</div>

		<div class="row pb-2">
			<div class="col-12">
				<label><strong>Event log</strong>:</label>
				<textarea @bind="_div5Log" class="form-control w-100" readonly></textarea>
			</div>
		</div>
	</div>

</div>

@implements IAsyncDisposable

@inject ITransitionEventsService _transitionService;
@code {
	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await _transitionService.RegisterTransitionEndedAsync(_div3, OnTransitionEnded3);
			await _transitionService.RegisterTransitionEndedAsync(_div4, OnTransitionEnded4, "height");

			KeyValuePair<ElementReference, string>[] transElements = 
			{ 
				new KeyValuePair<ElementReference, string>(_div5, "opacity"),
				new KeyValuePair<ElementReference, string>(_div5, "height"),
				new KeyValuePair<ElementReference, string>(_div5, "width"),
				new KeyValuePair<ElementReference, string>(_label5, "font-size")
			};
			await _transitionService.RegisterTransitionsWhenAllEndedAsync(OnTransitionEnded5, transElements);
		}
	}

	private bool _eventsSubscribed1 = true;
	private string _eventsText1 = "Unsubscribe events";
	private async Task HandleEvent1()
	{
		if(_eventsSubscribed1)
		{
			await _transitionService.RemoveTransitionEndedAsync(_div3);
			_eventsText1 = "Subscribe to events";
		}
		else
		{
			await _transitionService.RegisterTransitionEndedAsync(_div3, OnTransitionEnded3);
			_eventsText1 = "Unsubscribe events";
		}

		_eventsSubscribed1 = !_eventsSubscribed1;
	}

	private bool _eventsSubscribed2 = true;
	private string _eventsText2 = "Unsubscribe events";
	private async Task HandleEvent2()
	{
		if(_eventsSubscribed2)
		{
			await _transitionService.RemoveTransitionEndedAsync(_div4, "height");
			_eventsText2 = "Subscribe to events";
		}
		else
		{
			await _transitionService.RegisterTransitionEndedAsync(_div4, OnTransitionEnded4, "height");
			_eventsText2 = "Unsubscribe events";
		}

		_eventsSubscribed2 = !_eventsSubscribed2;
	}

	private bool _eventsSubscribed3 = true;
	private string _eventsText3 = "Unsubscribe events";
	private async Task HandleEvent3()
	{
		KeyValuePair<ElementReference, string>[] transElements = 
		{ 
			new KeyValuePair<ElementReference, string>(_div5, "opacity"),
			new KeyValuePair<ElementReference, string>(_div5, "height"),
			new KeyValuePair<ElementReference, string>(_div5, "width"),
			new KeyValuePair<ElementReference, string>(_label5, "font-size")
		};

		if(_eventsSubscribed3)
		{
			await _transitionService.RemoveTransitionsWhenAllEndedAsync(transElements);
			_eventsText3 = "Subscribe to events";
		}
		else
		{
			await _transitionService.RegisterTransitionsWhenAllEndedAsync(OnTransitionEnded5, transElements);
			_eventsText3 = "Unsubscribe events";
		}

		_eventsSubscribed3 = !_eventsSubscribed3;
	}

	private string _div1Log;
	private void OnTransitionEnded1(TransitionEventArgs e)
	{
		_div1Log = WriteLog(_div1Log, e);
	}
	private string _div2Log;
	private void OnTransitionEnded2(TransitionEventArgs e)
	{
		_div2Log = WriteLog(_div2Log, e);
	}

	private ElementReference _div3;
	private string _div3Log;
	private async Task OnTransitionEnded3(TransitionEventArgs e)
	{
		_div3Log = WriteLog(_div3Log, e);
		StateHasChanged();
	}

	private ElementReference _div4;
	private string _div4Log;
	private async Task OnTransitionEnded4(TransitionEventArgs e)
	{
		_div4Log = WriteLog(_div4Log, e);
		StateHasChanged();
	}

	private ElementReference _div5;
	private ElementReference _label5;
	private string _div5Log;
	private async Task OnTransitionEnded5(TransitionEventArgs[] args)
	{
		var time = DateTime.Now.TimeOfDay;
		_div5Log += $"{time}: Aggregated Transitions ended: total number of events: '{args.Length}'.  \r\n";

		foreach(var item in args)
		{
			_div5Log = WriteLog(_div5Log, item, time);
		}
		StateHasChanged();
	}

	private string WriteLog(string log, TransitionEventArgs e, TimeSpan? eventTime = null)
	{
		return log 
			+= $"{eventTime ?? DateTime.Now.TimeOfDay}: Transition ended filter: '{e.OriginalPropertyNameFilter}', Element Id: '{e.Element.Id}', Type: '{e.Type}', PropertyName: '{e.PropertyName}', ElapsedTime: '{e.ElapsedTime}', ReturnValue '{e.ReturnValue}'. \r\n";
	}

	public async ValueTask DisposeAsync()
	{
		if(_transitionService is not null)
		{
			await _transitionService.DisposeAsync();
		}
	}
}