<div class="loading" style="background-color: @OverlayBackgroundColor?.ToLower();" hidden="@(!_isLoading)" @attributes=AllOtherAttributes>
	<div class="loading-content">@(LoadingContent)</div>	
</div>

@code {
	[Parameter]
	public RenderFragment LoadingContent { get; set; }

	[Parameter]
	public string OverlayBackgroundColor { get; set; } = "gray";

	[Parameter(CaptureUnmatchedValues = true)]
	public Dictionary<string, object> AllOtherAttributes { get; set; }

	[Parameter] 
	public EventCallback OnLoading { get; set; }

	private bool _isLoading = false;
	protected override async Task OnInitializedAsync()
	{
		_isLoading = true;

		try
		{
			if(OnLoading.HasDelegate)
			{
				await OnLoading.InvokeAsync();
			}
		}
		finally
		{
			_isLoading = false;
		}
	}

	public void Set() => _isLoading = true;
	public void Reset() => _isLoading = false;
}

<style>
	.loading {
	  width: 100%;
	  height: 100%;
	  top: 0;
	  left: 0;
	  position: fixed;
	  display: block;
	  opacity: 0.9;
	  z-index: 999;
	  text-align: center;
	}

	.loading-content {
	  position: absolute;
	  top: 45%;
	  left: 45%;
	  z-index: 1000;
	}
</style>
