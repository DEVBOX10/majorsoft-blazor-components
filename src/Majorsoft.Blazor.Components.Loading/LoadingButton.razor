<button @ref="_inputRef" @onclick="ButtonClicked" type="@Type.ToString().ToLower()" disabled=@(_isLoading && DisabledWhenLoading) @attributes=AllOtherAttributes>
	@(!_isLoading ? Content : LoadingContent)
</button>

@inject ILogger<LoadingButton> _logger;
@code {
	protected ElementReference _inputRef;
	public ElementReference InnerElementReference => _inputRef;

	[Parameter]
	public RenderFragment Content { get; set; }

	[Parameter]
	public RenderFragment LoadingContent { get; set; }

	[Parameter]
	public ButtonTypes Type { get; set; } = ButtonTypes.Button;

	[Parameter]
	public bool DisabledWhenLoading { get; set; } = true;

	[Parameter(CaptureUnmatchedValues = true)]
	public Dictionary<string, object> AllOtherAttributes { get; set; }

	[Parameter]
	public EventCallback OnClicked { get; set; }

	public void Set()
	{
		_isLoading = true;
		WriteDiag($"Set() method called currently IsLoading: '{_isLoading}'.");
	}
	public void Reset()
	{
		_isLoading = false;
		WriteDiag($"Reset() method called currently IsLoading: '{_isLoading}'.");
	}

	private bool _isLoading = false;
	private async Task ButtonClicked(MouseEventArgs e)
	{
		if (!OnClicked.HasDelegate)
		{
			WriteDiag($"Clicked but no event handler registered. Button won't go to loading state please use Set/Reset functions or register OnClicked event.");
			return;
		}

		_isLoading = true;
		WriteDiag($"Clicked async event handler will be called. Currently IsLoading: '{_isLoading}'.");

		try
		{
			await OnClicked.InvokeAsync();
		}
		finally
		{
			_isLoading = false;
			WriteDiag($"Async event handler awaited. Load finished IsLoading: '{_isLoading}'.");
		}
	}

	private void WriteDiag(string message)
	{
		_logger.LogDebug($"Component {this.GetType()}: {message}");
	}
}