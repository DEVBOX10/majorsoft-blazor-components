<div id="@($"toggleButton_{_componentId}")" @ref="_inputRef" disabled="@Disabled" @attributes=AllOtherAttributes>
	<CascadingValue Value="this">
		@ToggleButtons
	</CascadingValue>
</div>

@inject ILogger<ToggleButtonGroup> _logger;

@code {
	private string _componentId = Guid.NewGuid().ToString("n");
	protected ElementReference _inputRef;
	public ElementReference InnerElementReference => _inputRef;

	[Parameter]
	public RenderFragment ToggleButtons { get; set; }

	[Parameter] public bool Disabled { get; set; } = false;

	[Parameter] public EventCallback<ToggleButton?> OnToggleChanged { get; set; }

	[Parameter(CaptureUnmatchedValues = true)]
	public Dictionary<string, object> AllOtherAttributes { get; set; }

	private ToggleButton? _activeButton;
	[Parameter] public ToggleButton? ActiveButton
	{
		get => _activeButton;
		set
		{
			if (value != _activeButton)
			{
				_activeButton = value;
				if (_activeButton != null)
				{
					_activeButton.Checked = true;
					//StateHasChanged();
				}

				ButtonToggled(_activeButton);
			}
		}
	}
	private IList<ToggleButton> Buttons = new List<ToggleButton>();

	internal void AddButton(ToggleButton button)
	{
		if (button is not null)
		{
			Buttons.Add(button);
		}
	}

	internal async Task ButtonToggled(ToggleButton? button)
	{
		if(button is not null && Buttons.Contains(button))
		{
			if (button.Checked)
			{
				ActiveButton = button;
				foreach (var item in Buttons)
				{
					if (item != button)
					{
						item.Checked = false;
					}
				}
			}
			else
			{
				ActiveButton = null;
			}

			StateHasChanged();
			if(OnToggleChanged.HasDelegate)
			{
				await OnToggleChanged.InvokeAsync(ActiveButton);
			}
		}
	}

	private void WriteDiag(string message)
	{
		_logger.LogDebug($"Component {this.GetType()}: {message}");
	}
}