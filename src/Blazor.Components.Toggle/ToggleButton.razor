<input @ref="_inputRef" type="checkbox" @bind="Checked" @oninput="Switched" disabled="@Disabled" @attributes=AllOtherAttributes
	style="width: @(Width)px; height: @(Height)px;" />

@using Blazor.Components.Core.HtmlColors;

@inject ILogger<ToggleButton> _logger;

@code {
	@*private string _componentId = Guid.NewGuid().ToString("n");*@
	protected ElementReference _inputRef;
	public ElementReference InnerElementReference => _inputRef;

	private string _onColor = "0, 0, 255";//blue
	[Parameter] 
	public string OnColor
	{
		get => _onColor;
		set => _onColor = new HtmlColor(value)?.RgbColor.ToRgbString();
	}
	private string _offColor = "169, 169, 169";//darkgray
	[Parameter] 
	public string OffColor
	{
		get => _offColor;
		set => _offColor = new HtmlColor(value)?.RgbColor.ToRgbString();
	}

	[Parameter] 
	public bool Checked { get; set; } = false;

	[Parameter] public int Height { get; set; } = 30;
	[Parameter] public int Width { get; set; } = 30;
	[Parameter] public bool Disabled { get; set; } = false;

	[Parameter] public EventCallback<bool> OnToggleChanged { get; set; }

	[Parameter(CaptureUnmatchedValues = true)]
	public Dictionary<string, object> AllOtherAttributes { get; set; }

	private async Task Switched(ChangeEventArgs e)
	{
		WriteDiag($"{nameof(Switched)} Toggle switch value changed: '{!Checked}'.");

		if(OnToggleChanged.HasDelegate)
		{
			await OnToggleChanged.InvokeAsync(!Checked);
		}
	}

	private void WriteDiag(string message)
	{
		_logger.LogDebug($"Component {this.GetType()}: {message}");
	}
}