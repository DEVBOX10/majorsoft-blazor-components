<div id="@_mapContainerId" @ref="_jsMap" style="width:@(Width)px; height:@(Height)px;" @attributes=AllOtherAttributes></div>

@implements IAsyncDisposable

@inject ILogger<GoogleStaticMap> _logger
@inject IGeolocationService _geolocationService
@inject IGoogleMapsService _mapService

@code {
	private string _mapContainerId = $"map_{Guid.NewGuid().ToString("n")}";
	private ElementReference _jsMap;
	/// <summary>
	/// Exposes a Blazor <see cref="ElementReference"/> of the wrapped around HTML element. It can be used e.g. for JS interop, etc.
	/// </summary>
	public ElementReference InnerElementReference => _jsMap;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await _mapService.InitMap(ApiKey, _mapContainerId,
				async (mapId) =>
				{
					WriteDiag($"Google JavaScript API Map initialzied with DIV Id: '{_mapContainerId}'.");
					if (OnMapInitialized.HasDelegate)
					{
						await OnMapInitialized.InvokeAsync(_mapContainerId);
					}
				});
		}
	}

	/// <summary>
	/// Defines the zoom level of the map, which determines the magnification level of the map.
	/// </summary>
	[Parameter] public byte ZoomLevel { get; set; } = 12;

	//Size
	/// <summary>
	/// Maps image Width in px.
	/// </summary>
	[Parameter] public double Width { get; set; } = 400;
	/// <summary>
	/// Maps image Height in px.
	/// </summary>
	[Parameter] public double Height { get; set; } = 300;

	/// <summary>
	/// Maps center position set by the given Coordinates or Address.
	/// Also can be set the divece location by setting <see cref="CenterCurrentLocation"/> to `true`.
	/// </summary>
	[Parameter] public GeolocationData? Center { get; set; }

	/// <summary>
	/// If set `true` then Maps try to detect device location by using <see cref="IGeolocationService"/> and center on the Map once when Map was first loaded.
	/// Note: it will override <see cref="Center"/> location, but detecting geolocation is an `async` operation. It means map might be centered after some time the page rendered or location might fail!
	/// </summary>
	[Parameter]
	public bool CenterCurrentLocation { get; set; } = false;

	/// <summary>
	/// Required allows you to monitor your application's API usage in the Google Cloud Console.
	/// </summary>
	[Parameter] public string ApiKey { get; set; }

	//Events
	[Parameter] public EventCallback<string> OnMapInitialized { get; set; }

	/// <summary>
	/// Blazor capture for any unmatched HTML attributes.
	/// </summary>
	[Parameter(CaptureUnmatchedValues = true)]
	public Dictionary<string, object> AllOtherAttributes { get; set; }


	private void WriteDiag(string message)
	{
		_logger.LogDebug($"Component {this.GetType()}: {message}");
	}

	public async ValueTask DisposeAsync()
	{
		if (_geolocationService is not null)
		{
			await _geolocationService.DisposeAsync();
		}
	}
}