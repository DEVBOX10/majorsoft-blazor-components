<div id="@_mapContainerId" @ref="_jsMap"
	 style="position: relative; overflow: hidden; width: @(Width)px; height: @(Height)px;" @attributes=AllOtherAttributes>
</div>

@implements IAsyncDisposable

@inject ILogger<GoogleStaticMap> _logger
@inject IGeolocationService _geolocationService
@inject IGoogleMapsService _mapService

@code {
	private string _mapContainerId = $"map_{Guid.NewGuid().ToString("n")}";
	private ElementReference _jsMap;
	/// <summary>
	/// Exposes a Blazor <see cref="ElementReference"/> of the wrapped around HTML element. It can be used e.g. for JS interop, etc.
	/// </summary>
	public ElementReference InnerElementReference => _jsMap;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await _mapService.InitMap(ApiKey, _mapContainerId,
				mapInitializedCallback: async (mapId) =>
				{
					WriteDiag($"Google JavaScript API Map initialzied with DIV Id: '{_mapContainerId}'.");
					if (CenterCurrentLocation)
					{
						await CenterCurrentLocationOnMap();
					}

					if (OnMapInitialized.HasDelegate)
					{
						await OnMapInitialized.InvokeAsync(_mapContainerId);
					}
				},
				mapClickedCallback: async (coords) =>
				{
					WriteDiag($"Map was clicked at: '{coords}'.");
					if (OnMapClicked.HasDelegate)
					{
						await OnMapClicked.InvokeAsync(coords);
					}
				},
				mapZoomChangedCallback: async (zoom) =>
				{
					WriteDiag($"Map Zoom level changed to: '{zoom}'.");

					_zoomLevel = zoom;
					if (OnMapZoomLevelChanged.HasDelegate)
					{
						await OnMapZoomLevelChanged.InvokeAsync(zoom);
					}
				},
				mapCenterChangedCallback: async (coords) =>
				{
					WriteDiag($"Map Center changed to: '{coords}'.");

					_center = new GeolocationData()
					{
						Latitude = coords.Latitude,
						Longitude = coords.Longitude,
						Address = _center.Address
					};
					if (OnMapCenterChangedChanged.HasDelegate)
					{
						await OnMapCenterChangedChanged.InvokeAsync(_center);
					}
				});
		}
	}

	private byte _zoomLevel = 12;
	/// <summary>
	/// Defines the zoom level of the map, which determines the magnification level of the map.
	/// </summary>
	[Parameter]
	public byte ZoomLevel
	{
		get => _zoomLevel;
		set
		{
			if (value != _zoomLevel)
			{
				_zoomLevel = value;
				InvokeAsync(async () => await _mapService.SetZoom(ZoomLevel));
			}
		}
	}

	//Size
	private int _width = 400;
	/// <summary>
	/// Maps image Width in px.
	/// </summary>
	[Parameter]
	public int Width
	{
		get => _width;
		set
		{
			if (value != _width)
			{
				_width = value;
				InvokeAsync(async () => await _mapService.ResizeMap());
			}
		}
	}
	private int _height = 300;
	/// <summary>
	/// Maps image Height in px.
	/// </summary>
	[Parameter]
	public int Height
	{
		get => _height;
		set
		{
			if (value != _height)
			{
				_height = value;
				InvokeAsync(async () => await _mapService.ResizeMap());
			}
		}
	}

	private GeolocationData? _center;
	/// <summary>
	/// Maps center position set by the given Coordinates or Address.
	/// Also can be set the divece location by setting <see cref="CenterCurrentLocation"/> to `true`.
	/// </summary>
	[Parameter]
	public GeolocationData? Center
	{
		get => _center;
		set
		{
			if (_center != value)
			{
				_center = value;
				InvokeAsync(async () =>
				{
					if (Center?.HasCoordinates ?? false)
					{
						await _mapService.SetCenter(Center.Latitude.Value, Center.Longitude.Value);
					}
					else if (!string.IsNullOrWhiteSpace(Center?.Address))
					{
						await _mapService.SetCenter(Center.Address);
					}
				});
			}
		}
	}

	/// <summary>
	/// If set `true` then Maps try to detect device location by using <see cref="IGeolocationService"/> and center on the Map once when Map was first loaded.
	/// Note: it will override <see cref="Center"/> location, but detecting geolocation is an `async` operation. It means map might be centered after some time the page rendered or location might fail!
	/// </summary>
	[Parameter] public bool CenterCurrentLocation { get; set; } = false;

	/// <summary>
	/// Required allows you to monitor your application's API usage in the Google Cloud Console.
	/// </summary>
	[Parameter] public string ApiKey { get; set; }

	#region Map events

	//Events
	/// <summary>
	///
	/// </summary>
	[Parameter] public EventCallback<string> OnMapInitialized { get; set; }

	/// <summary>
	///
	/// </summary>
	[Parameter] public EventCallback<GeolocationCoordinate> OnMapClicked { get; set; }

	/// <summary>
	///
	/// </summary>
	[Parameter] public EventCallback<byte> OnMapZoomLevelChanged { get; set; }

	[Parameter] public EventCallback<GeolocationData> OnMapCenterChangedChanged { get; set; }

	#endregion

	/// <summary>
	/// Callback function called when location successfully detected with <see cref="IGeolocationService"/>.
	/// Device positon will be supplied in the event which should be used to override <see cref="Center"/> parameter value.
	/// </summary>
	[Parameter] public EventCallback<GeolocationData> OnCurrentLocationDetected { get; set; }


	/// <summary>
	/// Blazor capture for any unmatched HTML attributes.
	/// </summary>
	[Parameter(CaptureUnmatchedValues = true)]
	public Dictionary<string, object> AllOtherAttributes { get; set; }

	/// <summary>
	/// Starts an async operation to try to dectect device locaton by using <see cref="IGeolocationService"/>.
	/// Once operation has finished succesfully <see cref="OnLocationDetected"/> event will be fired.
	/// </summary>
	/// <returns>Async task</returns>
	public async Task CenterCurrentLocationOnMap()
	{
		await _geolocationService.GetCurrentPosition(LocationResult, false, TimeSpan.FromSeconds(10));
		WriteDiag($"Geolocation service was called waiting for response, result will be processed in callback method.");
	}
	private async Task LocationResult(GeolocationResult pos)
	{
		WriteDiag($"Geolocation service result received in callback method. Result success: '{pos?.IsSuccess}'.");

		if (pos?.IsSuccess ?? false)
		{
			await _mapService.SetCenter(pos.Coordinates.Latitude, pos.Coordinates.Longitude);
			Center = new GeolocationData()
			{
				Latitude = pos.Coordinates.Latitude,
				Longitude = pos.Coordinates.Longitude
			};

			if (OnCurrentLocationDetected.HasDelegate)
			{
				WriteDiag($"Notifying {nameof(OnCurrentLocationDetected)} delegates with detected coordinates.");
				await OnCurrentLocationDetected.InvokeAsync(Center);
			}
		}
	}

	private void WriteDiag(string message)
	{
		_logger.LogDebug($"Component {this.GetType()}: {message}");
	}

	public async ValueTask DisposeAsync()
	{
		if (_geolocationService is not null)
		{
			await _geolocationService.DisposeAsync();
		}
	}
}