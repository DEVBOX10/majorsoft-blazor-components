<div id="@_mapContainerId" @ref="_jsMap"
	 style="position: relative; overflow: hidden; width: @(Width)px; height: @(Height)px;" @attributes=AllOtherAttributes>
</div>

@implements IAsyncDisposable

@inject ILogger<GoogleStaticMap> _logger
@inject IGeolocationService _geolocationService
@inject IGoogleMapsService _mapService

@code {
	private string _mapContainerId = $"map_{Guid.NewGuid().ToString("n")}";
	private ElementReference _jsMap;
	/// <summary>
	/// Exposes a Blazor <see cref="ElementReference"/> of the wrapped around HTML element. It can be used e.g. for JS interop, etc.
	/// </summary>
	public ElementReference InnerElementReference => _jsMap;

	private bool _mapInitialized = false;
	protected override async Task OnInitializedAsync()
	{
		{
			await _mapService.InitMap(ApiKey, _mapContainerId,
				mapInitializedCallback: async (mapId) =>
				{
					WriteDiag($"Google JavaScript API Map initialzied with DIV Id: '{_mapContainerId}'.");
					if (CenterCurrentLocation)
					{
						await CenterCurrentLocationOnMap();
					}

					_mapInitialized = true;
					StateHasChanged(); //Must reset all parameter values in JS after Maps initialized

					if (OnMapInitialized.HasDelegate)
					{
						await OnMapInitialized.InvokeAsync(_mapContainerId);
					}
				},
				mapClickedCallback: async (coords) =>
				{
					WriteDiag($"Map was clicked at: '{coords}'.");
					if (OnMapClicked.HasDelegate)
					{
						await OnMapClicked.InvokeAsync(coords);
					}
				},
				mapDoubleClickedCallback: async (coords) =>
				{
					WriteDiag($"Map was double clicked at: '{coords}'.");
					if (OnMapDoubleClicked.HasDelegate)
					{
						await OnMapDoubleClicked.InvokeAsync(coords);
					}
				},
				mapMouseUpCallback: async (coords) =>
				{
					WriteDiag($"Map mouse button Up at: '{coords}'.");
					if (OnMapMouseUp.HasDelegate)
					{
						await OnMapMouseUp.InvokeAsync(coords);
					}
				},
				mapMouseDownCallback: async (coords) =>
				{
					WriteDiag($"Map mouse button Down at: '{coords}'.");
					if (OnMapMouseDown.HasDelegate)
					{
						await OnMapMouseDown.InvokeAsync(coords);
					}
				},
				mapMouseMoveCallback: async (coords) =>
				{
					WriteDiag($"Map mouse moved to: '{coords}'.");
					if (OnMouseMove.HasDelegate)
					{
						await OnMouseMove.InvokeAsync(coords);
					}
				},
				mapMouseOverCallback: async () =>
				{
					WriteDiag($"Map mouse (over) entered into Maps area.");
					if (OnMapMouseOver.HasDelegate)
					{
						await OnMapMouseOver.InvokeAsync();
					}
				},
				mapMouseOutCallback: async () =>
				{
					WriteDiag($"Map mouse (out) leaved Maps area.");
					if (OnMapMouseOut.HasDelegate)
					{
						await OnMapMouseOut.InvokeAsync();
					}
				},
				mapCenterChangedCallback: async (coords) =>
				{
					WriteDiag($"Map Center changed to: '{coords}', current center: {_center}.");

					_center = new GeolocationData(coords.Latitude, coords.Longitude);
					if (OnMapCenterChanged.HasDelegate)
					{
						await OnMapCenterChanged.InvokeAsync(_center);
					}
				},
				mapZoomChangedCallback: async (zoom) =>
				{
					WriteDiag($"Map Zoom level changed to: '{zoom}'.");

					_zoomLevel = zoom;
					if (OnMapZoomLevelChanged.HasDelegate)
					{
						await OnMapZoomLevelChanged.InvokeAsync(zoom);
					}
				},
				mapTypeChangedCallback: async (type) =>
				{
					WriteDiag($"Map Type changed to: '{type}'.");

					//_zoomLevel = type;
					if (OnMapTypeChanged.HasDelegate)
					{
						await OnMapTypeChanged.InvokeAsync(type);
					}
				},
				mapHeadingChangedCallback: async (heading) =>
				{
					WriteDiag($"Map Heading changed to: '{heading}'.");

					//_zoomLevel = heading;
					if (OnMapHeadingChanged.HasDelegate)
					{
						await OnMapHeadingChanged.InvokeAsync(heading);
					}
				},
				mapTiltChangedCallback: async (tilt) =>
				{
					WriteDiag($"Map Tilt changed to: '{tilt}'.");

					//_zoomLevel = tilt;
					if (OnMapTiltChanged.HasDelegate)
					{
						await OnMapTiltChanged.InvokeAsync(tilt);
					}
				},
				mapBoundsChangedCallback: async () =>
				{
					WriteDiag($"Map Bounds changed.");

					if (OnMapBoundsChanged.HasDelegate)
					{
						await OnMapBoundsChanged.InvokeAsync();
					}
				},
				mapProjectionChangedCallback: async () =>
				{
					WriteDiag($"Map Projection changed.");

					if (OnMapProjectionChanged.HasDelegate)
					{
						await OnMapProjectionChanged.InvokeAsync();
					}
				},
				mapDraggableChangedCallback: async () =>
				{
					WriteDiag($"Map Draggable changed.");

					if (OnMapDraggableChanged.HasDelegate)
					{
						await OnMapDraggableChanged.InvokeAsync();
					}
				},
				mapStreetviewChangedCallback: async () =>
				{
					WriteDiag($"Map Streetview changed.");

					if (OnMapStreetviewChanged.HasDelegate)
					{
						await OnMapStreetviewChanged.InvokeAsync();
					}
				},
				mapDragCallback: async (coords) =>
				{
					WriteDiag($"Map Dragging to: '{coords}', current center: {_center}.");

					if (OnMapDrag.HasDelegate)
					{
						await OnMapDrag.InvokeAsync(_center);
					}
				},
				mapDragEndCallback: async (coords) =>
				{
					WriteDiag($"Map Dragging End to: '{coords}', current center: {_center}.");

					if (OnMapDragEnd.HasDelegate)
					{
						await OnMapDragEnd.InvokeAsync(_center);
					}
				},
				mapDragStartCallback: async (coords) =>
				{
					WriteDiag($"Map Dragging Start to: '{coords}', current center: {_center}.");

					if (OnMapDragStart.HasDelegate)
					{
						await OnMapDragStart.InvokeAsync(_center);
					}
				},
				mapResizedCallback: async (rect) =>
				{
					WriteDiag($"Map resized to: '{rect}'.");

					if (OnMapResized.HasDelegate)
					{
						await OnMapResized.InvokeAsync(rect);
					}
				},
				mapTilesLoadedCallback: async () =>
				{
					WriteDiag($"Map new Tiles loaded.");

					if (OnMapTilesLoaded.HasDelegate)
					{
						await OnMapTilesLoaded.InvokeAsync();
					}
				},
				mapIdleCallback: async () =>
				{
					WriteDiag($"Map Ideling.");

					if (OnMapIdle.HasDelegate)
					{
						await OnMapIdle.InvokeAsync();
					}
				});
		}
	}

	private byte _zoomLevel = 12;
	/// <summary>
	/// Defines the zoom level of the map, which determines the magnification level of the map.
	/// </summary>
	[Parameter]
	public byte ZoomLevel
	{
		get => _zoomLevel;
		set
		{
			if (_mapInitialized && value != _zoomLevel)
			{
				_zoomLevel = value;
				InvokeAsync(async () => await _mapService.SetZoom(ZoomLevel));
			}
		}
	}

	//Size
	private int _width = 400;
	/// <summary>
	/// Maps image Width in px.
	/// </summary>
	[Parameter]
	public int Width
	{
		get => _width;
		set
		{
			if (_mapInitialized && value != _width)
			{
				_width = value;
				InvokeAsync(async () => await _mapService.ResizeMap());
			}
		}
	}
	private int _height = 300;
	/// <summary>
	/// Maps image Height in px.
	/// </summary>
	[Parameter]
	public int Height
	{
		get => _height;
		set
		{
			if (_mapInitialized && value != _height)
			{
				_height = value;
				InvokeAsync(async () => await _mapService.ResizeMap());
			}
		}
	}

	private GeolocationData? _center;
	/// <summary>
	/// Maps center position set by the given Coordinates or Address.
	/// Also can be set the divece location by setting <see cref="CenterCurrentLocation"/> to `true`.
	/// </summary>
	[Parameter]
	public GeolocationData? Center
	{
		get => _center;
		set
		{
			if (_mapInitialized && _center != value && _center?.ToString() != value?.ToString())
			{
				_center = value;
				InvokeAsync(async () =>
				{
					if (Center?.HasCoordinates ?? false)
					{
						await _mapService.SetCenter(Center.Latitude.Value, Center.Longitude.Value);
					}
					else if (!string.IsNullOrWhiteSpace(Center?.Address))
					{
						await _mapService.SetCenter(Center.Address);
					}
				});
			}
		}
	}

	/// <summary>
	/// If set `true` then Maps try to detect device location by using <see cref="IGeolocationService"/> and center on the Map once when Map was first loaded.
	/// Note: it will override <see cref="Center"/> location, but detecting geolocation is an `async` operation. It means map might be centered after some time the page rendered or location might fail!
	/// </summary>
	[Parameter] public bool CenterCurrentLocation { get; set; } = false;

	/// <summary>
	/// Required allows you to monitor your application's API usage in the Google Cloud Console.
	/// </summary>
	[Parameter] public string ApiKey { get; set; }

	#region Map events

	//Events
	/// <summary>
	/// Callback function for Google Map initialized event
	/// </summary>
	[Parameter] public EventCallback<string> OnMapInitialized { get; set; }

	/// <summary>
	///Callback function for Google Map clicked event
	/// </summary>
	[Parameter] public EventCallback<GeolocationCoordinate> OnMapClicked { get; set; }
	/// <summary>
	/// Callback function for Google Map double clicked event
	/// </summary>
	[Parameter] public EventCallback<GeolocationCoordinate> OnMapDoubleClicked { get; set; }
	/// <summary>
	/// Callback function for Google Map mouse up event
	/// </summary>
	[Parameter] public EventCallback<GeolocationCoordinate> OnMapMouseUp { get; set; }
	/// <summary>
	/// Callback function for Google Map mouse down event
	/// </summary>
	[Parameter] public EventCallback<GeolocationCoordinate> OnMapMouseDown { get; set; }
	/// <summary>
	/// Callback function for Google Map mouse move event
	/// </summary>
	[Parameter] public EventCallback<GeolocationCoordinate> OnMouseMove { get; set; }
	/// <summary>
	/// Callback function for Google Map mouse enter event
	/// </summary>
	[Parameter] public EventCallback OnMapMouseOver { get; set; }
	/// <summary>
	/// Callback function for Google Map mouse leaving event
	/// </summary>
	[Parameter] public EventCallback<GeolocationCoordinate> OnMapMouseOut { get; set; }

	/// <summary>
	/// Callback function for Google Map Center point changed event
	/// </summary>
	[Parameter] public EventCallback<GeolocationCoordinate> OnMapCenterChanged { get; set; }
	/// <summary>
	/// Callback function for Google Map zoom level changed event
	/// </summary>
	[Parameter] public EventCallback<byte> OnMapZoomLevelChanged { get; set; }
	/// <summary>
	/// Callback function for Google Map type changed event
	/// </summary>
	[Parameter] public EventCallback<GoogleMapTypes> OnMapTypeChanged { get; set; }
	/// <summary>
	/// Callback function for Google Map heading changed event
	/// </summary>
	[Parameter] public EventCallback<int> OnMapHeadingChanged { get; set; }
	/// <summary>
	/// Callback function for Google Map tilt position changed event
	/// </summary>
	[Parameter] public EventCallback<byte> OnMapTiltChanged { get; set; }
	/// <summary>
	/// Callback function for Google Map boundaries changed event
	/// </summary>
	[Parameter] public EventCallback OnMapBoundsChanged { get; set; }
	/// <summary>
	/// Callback function for Google Map projection changed event
	/// </summary>
	[Parameter] public EventCallback OnMapProjectionChanged { get; set; }
	/// <summary>
	/// Callback function for Google Map draggable changed event
	/// </summary>
	[Parameter] public EventCallback OnMapDraggableChanged { get; set; }
	/// <summary>
	/// Callback function for Google Map street-view changed event
	/// </summary>
	[Parameter] public EventCallback OnMapStreetviewChanged { get; set; }

	/// <summary>
	/// Callback function for Google Map dragging event
	/// </summary>
	[Parameter] public EventCallback<GeolocationCoordinate> OnMapDrag { get; set; }
	/// <summary>
	/// Callback function for Google Map drag ended event
	/// </summary>
	[Parameter] public EventCallback<GeolocationCoordinate> OnMapDragEnd { get; set; }
	/// <summary>
	/// Callback function for Google Map drag started event
	/// </summary>
	[Parameter] public EventCallback<GeolocationCoordinate> OnMapDragStart { get; set; }

	/// <summary>
	/// Callback function for Google Map resized event
	/// </summary>
	[Parameter] public EventCallback<Rect> OnMapResized { get; set; }
	/// <summary>
	/// Callback function for Google Map tiles loaded event
	/// </summary>
	[Parameter] public EventCallback OnMapTilesLoaded { get; set; }
	/// <summary>
	/// Callback function for Google Map idle event
	/// </summary>
	[Parameter] public EventCallback OnMapIdle { get; set; }

	#endregion

	/// <summary>
	/// Callback function called when location successfully detected with <see cref="IGeolocationService"/>.
	/// Device positon will be supplied in the event which should be used to override <see cref="Center"/> parameter value.
	/// </summary>
	[Parameter] public EventCallback<GeolocationData> OnCurrentLocationDetected { get; set; }


	/// <summary>
	/// Blazor capture for any unmatched HTML attributes.
	/// </summary>
	[Parameter(CaptureUnmatchedValues = true)]
	public Dictionary<string, object> AllOtherAttributes { get; set; }

	/// <summary>
	/// Starts an async operation to try to dectect device locaton by using <see cref="IGeolocationService"/>.
	/// Once operation has finished succesfully <see cref="OnLocationDetected"/> event will be fired.
	/// </summary>
	/// <returns>Async task</returns>
	public async Task CenterCurrentLocationOnMap()
	{
		await _geolocationService.GetCurrentPosition(LocationResult, false, TimeSpan.FromSeconds(10));
		WriteDiag($"Geolocation service was called waiting for response, result will be processed in callback method.");
	}
	private async Task LocationResult(GeolocationResult pos)
	{
		WriteDiag($"Geolocation service result received in callback method. Result success: '{pos?.IsSuccess}'.");

		if (pos?.IsSuccess ?? false)
		{
			await _mapService.SetCenter(pos.Coordinates.Latitude, pos.Coordinates.Longitude);
			Center = new GeolocationData(pos.Coordinates.Latitude, pos.Coordinates.Longitude);

			if (OnCurrentLocationDetected.HasDelegate)
			{
				WriteDiag($"Notifying {nameof(OnCurrentLocationDetected)} delegates with detected coordinates.");
				await OnCurrentLocationDetected.InvokeAsync(Center);
			}
		}
	}

	private void WriteDiag(string message)
	{
		_logger.LogDebug($"Component {this.GetType()}: {message}");
	}

	public async ValueTask DisposeAsync()
	{
		if (_geolocationService is not null)
		{
			await _geolocationService.DisposeAsync();
		}
	}
}