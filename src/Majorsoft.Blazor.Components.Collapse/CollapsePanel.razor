<div @ref="_inputRef" class="collapsePanel" tabindex="200" disabled="@Disabled" @attributes=AllOtherAttributes>
	@if (Collapsed)
	{
		<div class="collapseHeader collapsed" @onclick="ExpandCollapse">
			@CollapsedHeaderContent
		</div>
	}
	else
	{
		<div class="collapseHeader expanded" @onclick="ExpandCollapse">
			@ExpandedHeaderContent
		</div>
		<div class="collapseContent" style="height: @(ContentHeight <= 0 ? "auto;" : $"{ContentHeight}px;")">
			@Content
		</div>
	}
</div>

<style>
	.collapseHeader.expanded {
		background-color: @($"rgb({ExpandedColor})");
	}
	.collapseHeader.collapsed {
		background-color: @($"rgb({CollapsedColor})");
	}
	.collapseHeader:hover {
		background-color: @($"rgb({HoverColor})");
	}
</style>

@using Majorsoft.Blazor.Components.Core.HtmlColors;

@inject ILogger<CollapsePanel> _logger;

@code {
	protected ElementReference _inputRef;
	/// <summary>
	/// Exposes a Blazor <see cref="ElementReference"/> of the wrapped around HTML element. It can be used e.g. for JS interop, etc.
	/// </summary>
	public ElementReference InnerElementReference => _inputRef;

	[Parameter] public RenderFragment ExpandedHeaderContent { get; set; }
	[Parameter] public RenderFragment CollapsedHeaderContent { get; set; }

	[Parameter] public RenderFragment Content { get; set; }

	private string _expandedColor = "211,211,211";//lightGray
	/// <summary>
	/// Sets the `style` of the `background-color` when tab is Active. Use HTML specified: **Color Names**, **RGB**, **HEX** or with **HSL** values.
	/// </summary>
	[Parameter]
	public string ExpandedColor
	{
		get => _expandedColor;
		set => _expandedColor = new HtmlColor(value)?.RgbColor.ToRgbString();
	}
	private string _collapsedColor = "211,211,211";//lightGray
	/// <summary>
	/// Sets the `style` of the `background-color` when tab is not the Active tab. Use HTML specified: **Color Names**, **RGB**, **HEX** or with **HSL** values.
	/// </summary>
	[Parameter]
	public string CollapsedColor
	{
		get => _collapsedColor;
		set => _collapsedColor = new HtmlColor(value)?.RgbColor.ToRgbString();
	}
	private string _hoverColor = "245, 245, 245";//WhiteSmoke
	/// <summary>
	/// Sets the `style` of the `background-color` when button is hovered over with mouse. Use HTML specified: **Color Names**, **RGB**, **HEX** or with **HSL** values.
	/// </summary>
	[Parameter]
	public string HoverColor
	{
		get => _hoverColor;
		set => _hoverColor = new HtmlColor(value)?.RgbColor.ToRgbString();
	}

	/// <summary>
	/// Sets the height of Content panel in `px`. 0 is auto.
	/// </summary>
	[Parameter] public int ContentHeight { get; set; } = 100;

	/// <summary>
	/// Determines whether all the rendered HTML elements should be disabled or not.
	/// </summary>
	[Parameter] public bool Disabled { get; set; } = false;

	/// <summary>
	///
	/// </summary>
	[Parameter] public bool Collapsed { get; set; } = false;

	/// <summary>
	/// Callback function called when panel collapsed or expanded. Collapsed state is the callback parameter.
	/// </summary>
	[Parameter] public EventCallback<bool> OnCollapseChanged { get; set; }

	/// <summary>
	/// Blazor capture for any unmatched HTML attributes.
	/// </summary>
	[Parameter(CaptureUnmatchedValues = true)]
	public Dictionary<string, object> AllOtherAttributes { get; set; }

	private void ExpandCollapse()
	{
		Collapsed = !Collapsed;
	}

	private void WriteDiag(string message)
	{
		_logger.LogDebug($"Component {this.GetType()}: {message}");
	}
}