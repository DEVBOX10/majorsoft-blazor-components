<div class="picker-container" style="height:@(HueAreaHeight)px; width: @(HueAreaWidth)px; background-color: rgb(@SelectedColor.R, @SelectedColor.G, @SelectedColor.B);">
	<div class="picker-color" @onclick="ClickInColor"></div>
	<span class="picker-handler" tabindex="0" 
		style="height:@(_selectorThumbSize)px; width:@(_selectorThumbSize)px; left:@(_selectorThumbLeft)px; top: @(_selectorThumbTop)px; background:@_selectorThumbHex"></span>
</div>

<input id="@($"_hue_{_componentId}")" class="hue" style="width:@(HueSliderWidth)px; height:@(HueSliderHeight)px;" 
	   type="range" min="0" max="360" step="1" @bind="_hue" @oninput="HueChanged" />

<style>
	input[id=@($"_hue_{_componentId}")].hue::-webkit-slider-thumb {
		background: @_sliderThumbHex;
		width: @(_sliderThumbSize)px;
		height: @(_sliderThumbSize)px;
	}
	input[id=@($"_hue_{_componentId}")]::-moz-range-thumb {
		background: @_sliderThumbHex;
		width: @(_sliderThumbSize)px;
		height: @(_sliderThumbSize)px;
	}
	input[id=@($"_hue_{_componentId}")]::-ms-thumb {
		background: @_sliderThumbHex;
		width: @(_sliderThumbSize)px;
		height: @(_sliderThumbSize)px;
	}
</style>

@inject ILogger<HslColorSelector> _logger;

@code {
	string _componentId = Guid.NewGuid().ToString("n");

	private double _hue;
	private int _sliderThumbSize;
	private string _sliderThumbHex = "";

	private int _selectorThumbSize = 21;
	private double _selectorThumbLeft;
	private double _selectorThumbTop;
	private string _selectorThumbHex = "";

	[Parameter] public int HueAreaHeight { get; set; } = 250;
	[Parameter] public int HueAreaWidth { get; set; } = 450;
	[Parameter] public int HueSliderHeight { get; set; } = 10;
	[Parameter] public int HueSliderWidth { get; set; } = 450;
	[Parameter] public Color SelectedColor { get; set; } = Color.Blue;

	[Parameter] public EventHandler<Color> OnColorChanged { get; set; }

	protected override void OnInitialized()
	{
		_sliderThumbSize = (int)Math.Ceiling(HueSliderHeight * 2.5);
		_hue = SelectedColor.GetHue();

		SetSliderColor();

		_selectorThumbLeft = HueAreaWidth - (_selectorThumbSize / 2);
		_selectorThumbTop = 0 - (_selectorThumbSize / 2);
	}

	private void HueChanged(ChangeEventArgs e)
	{
		_hue = int.Parse(e.Value?.ToString());
		SetSliderColor();
	}

	private void SetSliderColor()
	{
		// Hue: slider value , saturation: 100.0 (full), luminosity: 50.0 (normal)
		var hslColor = new HslColor(_hue, 100, 50);
		var hueColor = (Color)hslColor;

		_sliderThumbHex = ColorTranslator.ToHtml(hueColor);

		//TODO: set the handler circle to the correct position of the color...
		SelectedColor = (Color)hslColor;
		_selectorThumbHex = ColorTranslator.ToHtml(SelectedColor);
	}

	private void ClickInColor(MouseEventArgs args)
	{
		_selectorThumbLeft = args.OffsetX - (_selectorThumbSize / 2);
		_selectorThumbTop = args.OffsetY - (_selectorThumbSize / 2);
	}

	private void WriteDiag(string message)
	{
		_logger.LogDebug($"Component {this.GetType()}: {message}");
	}
}